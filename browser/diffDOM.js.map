{"version":3,"file":"diffDOM.js","sources":["../src/diffDOM/dom/fromVirtual.js","../src/diffDOM/dom/apply.js","../src/diffDOM/dom/undo.js","../src/diffDOM/virtual/helpers.js","../src/diffDOM/virtual/apply.js","../src/diffDOM/virtual/fromDOM.js","../src/diffDOM/virtual/fromString.js","../src/diffDOM/virtual/diff.js","../src/diffDOM/index.js","../src/TraceLogger.js"],"sourcesContent":["export function objToNode(objNode, insideSvg, options) {\n    let node\n    if (objNode.nodeName === '#text') {\n        node = options.document.createTextNode(objNode.data)\n\n    } else if (objNode.nodeName === '#comment') {\n        node = options.document.createComment(objNode.data)\n    } else {\n        if (insideSvg) {\n            node = options.document.createElementNS('http://www.w3.org/2000/svg', objNode.nodeName)\n        } else if (objNode.nodeName.toLowerCase() === 'svg') {\n            node = options.document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n            insideSvg = true\n        } else {\n            node = options.document.createElement(objNode.nodeName)\n        }\n        if (objNode.attributes) {\n            Object.entries(objNode.attributes).forEach(([key, value]) => node.setAttribute(key, value))\n        }\n        if (objNode.childNodes) {\n            objNode.childNodes.forEach(childNode => node.appendChild(objToNode(childNode, insideSvg, options)))\n        }\n        if (options.valueDiffing) {\n            if (objNode.value) {\n                node.value = objNode.value\n            }\n            if (objNode.checked) {\n                node.checked = objNode.checked\n            }\n            if (objNode.selected) {\n                node.selected = objNode.selected\n            }\n        }\n    }\n    return node\n}\n","import {objToNode} from \"./fromVirtual\"\n\n// ===== Apply a diff =====\n\nfunction getFromRoute(node, route) {\n    route = route.slice()\n    while (route.length > 0) {\n        if (!node.childNodes) {\n            return false\n        }\n        const c = route.splice(0, 1)[0]\n        node = node.childNodes[c]\n    }\n    return node\n}\n\nexport function applyDiff(\n        tree,\n        diff,\n        options // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\n    ) {\n    let node = getFromRoute(tree, diff[options._const.route])\n    let newNode\n    let reference\n    let route\n    let nodeArray\n    let c\n\n    // pre-diff hook\n    const info = {\n        diff,\n        node\n    }\n\n    if (options.preDiffApply(info)) {\n        return true\n    }\n\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            if (!node || !node.setAttribute) {\n                return false\n            }\n            node.setAttribute(diff[options._const.name], diff[options._const.value])\n            break\n        case options._const.modifyAttribute:\n            if (!node || !node.setAttribute) {\n                return false\n            }\n            node.setAttribute(diff[options._const.name], diff[options._const.newValue])\n            if (node.nodeName === 'INPUT' && diff[options._const.name] === 'value') {\n                node.value = diff[options._const.newValue]\n            }\n            break\n        case options._const.removeAttribute:\n            if (!node || !node.removeAttribute) {\n                return false\n            }\n            node.removeAttribute(diff[options._const.name])\n            break\n        case options._const.modifyTextElement:\n            if (!node || node.nodeType !== 3) {\n                return false\n            }\n            options.textDiff(node, node.data, diff[options._const.oldValue], diff[options._const.newValue])\n            break\n        case options._const.modifyValue:\n            if (!node || typeof node.value === 'undefined') {\n                return false\n            }\n            node.value = diff[options._const.newValue]\n            break\n        case options._const.modifyComment:\n            if (!node || typeof node.data === 'undefined') {\n                return false\n            }\n            options.textDiff(node, node.data, diff[options._const.oldValue], diff[options._const.newValue])\n            break\n        case options._const.modifyChecked:\n            if (!node || typeof node.checked === 'undefined') {\n                return false\n            }\n            node.checked = diff[options._const.newValue]\n            break\n        case options._const.modifySelected:\n            if (!node || typeof node.selected === 'undefined') {\n                return false\n            }\n            node.selected = diff[options._const.newValue]\n            break\n        case options._const.replaceElement:\n            node.parentNode.replaceChild(\n                objToNode(\n                    diff[options._const.newValue],\n                    node.namespaceURI === 'http://www.w3.org/2000/svg',\n                    options\n                ),\n                node\n            )\n            break\n        case options._const.relocateGroup:\n            nodeArray = Array(...new Array(diff.groupLength)).map(() => node.removeChild(node.childNodes[diff[options._const.from]]))\n            nodeArray.forEach((childNode, index) => {\n                if (index === 0) {\n                    reference = node.childNodes[diff[options._const.to]]\n                }\n                node.insertBefore(childNode, reference || null)\n            })\n            break\n        case options._const.removeElement:\n            node.parentNode.removeChild(node)\n            break\n        case options._const.addElement:\n            route = diff[options._const.route].slice()\n            c = route.splice(route.length - 1, 1)[0]\n            node = getFromRoute(tree, route)\n            node.insertBefore(\n                objToNode(\n                    diff[options._const.element],\n                    node.namespaceURI === 'http://www.w3.org/2000/svg',\n                    options\n                ),\n                node.childNodes[c] || null\n            )\n            break\n        case options._const.removeTextElement:\n            if (!node || node.nodeType !== 3) {\n                return false\n            }\n            node.parentNode.removeChild(node)\n            break\n        case options._const.addTextElement:\n            route = diff[options._const.route].slice()\n            c = route.splice(route.length - 1, 1)[0]\n            newNode = options.document.createTextNode(diff[options._const.value])\n            node = getFromRoute(tree, route)\n            if (!node || !node.childNodes) {\n                return false\n            }\n            node.insertBefore(newNode, node.childNodes[c] || null)\n            break\n        default:\n            console.log('unknown action')\n    }\n\n    // if a new node was created, we might be interested in its\n    // post diff hook\n    info.newNode = newNode\n    options.postDiffApply(info)\n\n    return true\n}\n\nexport function applyDOM(tree, diffs, options) {\n    return diffs.every(diff => applyDiff(tree, diff, options))\n}\n","import {applyDiff} from \"./apply\"\n\n// ===== Undo a diff =====\n\nfunction swap(obj, p1, p2) {\n    const tmp = obj[p1]\n    obj[p1] = obj[p2]\n    obj[p2] = tmp\n}\n\nfunction undoDiff(\n    tree,\n    diff,\n    options // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\n) {\n\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            diff[options._const.action] = options._const.removeAttribute\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyAttribute:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeAttribute:\n            diff[options._const.action] = options._const.addAttribute\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyTextElement:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyValue:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyComment:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyChecked:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifySelected:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.replaceElement:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.relocateGroup:\n            swap(diff, options._const.from, options._const.to)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeElement:\n            diff[options._const.action] = options._const.addElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.addElement:\n            diff[options._const.action] = options._const.removeElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeTextElement:\n            diff[options._const.action] = options._const.addTextElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.addTextElement:\n            diff[options._const.action] = options._const.removeTextElement\n            applyDiff(tree, diff, options)\n            break\n        default:\n            console.log('unknown action')\n    }\n\n}\n\nexport function undoDOM(tree, diffs, options) {\n    if (!diffs.length) {\n        diffs = [diffs]\n    }\n    diffs = diffs.slice()\n    diffs.reverse()\n    diffs.forEach(diff => {\n        undoDiff(tree, diff, options)\n    })\n}\n","export class Diff {\n    constructor(options = {}) {\n        Object.entries(options).forEach(([key, value]) => this[key] = value)\n    }\n\n    toString() {\n        return JSON.stringify(this)\n    }\n\n    setValue(aKey, aValue) {\n        this[aKey] = aValue\n        return this\n    }\n}\n\nfunction elementDescriptors(el) {\n    const output = []\n    output.push(el.nodeName)\n    if (el.nodeName !== '#text' && el.nodeName !== '#comment') {\n        if (el.attributes) {\n            if (el.attributes['class']) {\n                output.push(`${el.nodeName}.${el.attributes['class'].replace(/ /g, '.')}`)\n            }\n            if (el.attributes.id) {\n                output.push(`${el.nodeName}#${el.attributes.id}`)\n            }\n        }\n\n    }\n    return output\n}\n\nfunction findUniqueDescriptors(li) {\n    const uniqueDescriptors = {}\n    const duplicateDescriptors = {}\n\n    li.forEach(node => {\n        elementDescriptors(node).forEach(descriptor => {\n            const inUnique = descriptor in uniqueDescriptors\n            const inDupes = descriptor in duplicateDescriptors\n            if (!inUnique && !inDupes) {\n                uniqueDescriptors[descriptor] = true\n            } else if (inUnique) {\n                delete uniqueDescriptors[descriptor]\n                duplicateDescriptors[descriptor] = true\n            }\n        })\n    })\n\n    return uniqueDescriptors\n}\n\nfunction uniqueInBoth(l1, l2) {\n    const l1Unique = findUniqueDescriptors(l1)\n    const l2Unique = findUniqueDescriptors(l2)\n    const inBoth = {}\n\n    Object.keys(l1Unique).forEach(key => {\n        if (l2Unique[key]) {\n            inBoth[key] = true\n        }\n    })\n\n    return inBoth\n}\n\nexport function removeDone(tree) {\n    delete tree.outerDone\n    delete tree.innerDone\n    delete tree.valueDone\n    if (tree.childNodes) {\n        return tree.childNodes.every(removeDone)\n    } else {\n        return true\n    }\n}\n\nexport function isEqual(e1, e2) {\n    if (!['nodeName', 'value', 'checked', 'selected', 'data'].every(element => {\n            if (e1[element] !== e2[element]) {\n                return false\n            }\n            return true\n        })) {\n        return false\n    }\n\n    if (Boolean(e1.attributes) !== Boolean(e2.attributes)) {\n        return false\n    }\n\n    if (Boolean(e1.childNodes) !== Boolean(e2.childNodes)) {\n        return false\n    }\n    if (e1.attributes) {\n        const e1Attributes = Object.keys(e1.attributes)\n        const e2Attributes = Object.keys(e2.attributes)\n\n        if (e1Attributes.length !== e2Attributes.length) {\n            return false\n        }\n        if (!e1Attributes.every(attribute => {\n                if (e1.attributes[attribute] !== e2.attributes[attribute]) {\n                    return false\n                }\n                return true\n            })) {\n            return false\n        }\n    }\n    if (e1.childNodes) {\n        if (e1.childNodes.length !== e2.childNodes.length) {\n            return false\n        }\n        if (!e1.childNodes.every((childNode, index) => isEqual(childNode, e2.childNodes[index]))) {\n\n            return false\n        }\n\n    }\n\n    return true\n}\n\n\nexport function roughlyEqual(e1, e2, uniqueDescriptors, sameSiblings, preventRecursion) {\n\n    if (!e1 || !e2) {\n        return false\n    }\n\n    if (e1.nodeName !== e2.nodeName) {\n        return false\n    }\n\n    if (e1.nodeName === '#text') {\n        // Note that we initially don't care what the text content of a node is,\n        // the mere fact that it's the same tag and \"has text\" means it's roughly\n        // equal, and then we can find out the true text difference later.\n        return preventRecursion ? true : e1.data === e2.data\n    }\n\n\n    if (e1.nodeName in uniqueDescriptors) {\n        return true\n    }\n\n    if (e1.attributes && e2.attributes) {\n\n        if (e1.attributes.id) {\n            if (e1.attributes.id !== e2.attributes.id) {\n                return false\n            } else {\n                const idDescriptor = `${e1.nodeName}#${e1.attributes.id}`\n                if (idDescriptor in uniqueDescriptors) {\n                    return true\n                }\n            }\n        }\n        if (e1.attributes['class'] && e1.attributes['class'] === e2.attributes['class']) {\n            const classDescriptor = `${e1.nodeName}.${e1.attributes['class'].replace(/ /g, '.')}`\n            if (classDescriptor in uniqueDescriptors) {\n                return true\n            }\n        }\n    }\n\n    if (sameSiblings) {\n        return true\n    }\n\n    const nodeList1 = e1.childNodes ? e1.childNodes.slice().reverse() : []\n    const nodeList2 = e2.childNodes ? e2.childNodes.slice().reverse() : []\n\n    if (nodeList1.length !== nodeList2.length) {\n        return false\n    }\n\n    if (preventRecursion) {\n        return nodeList1.every((element, index) => element.nodeName === nodeList2[index].nodeName)\n    } else {\n        // note: we only allow one level of recursion at any depth. If 'preventRecursion'\n        // was not set, we must explicitly force it to true for child iterations.\n        const childUniqueDescriptors = uniqueInBoth(nodeList1, nodeList2)\n        return nodeList1.every((element, index) => roughlyEqual(element, nodeList2[index], childUniqueDescriptors, true, true))\n    }\n}\n\n\nexport function cloneObj(obj) { //  TODO: Do we really need to clone here? Is it not enough to just return the original object?\n    return JSON.parse(JSON.stringify(obj))\n}\n/**\n * based on https://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Longest_common_substring#JavaScript\n */\nfunction findCommonSubsets(c1, c2, marked1, marked2) {\n    let lcsSize = 0\n    let index = []\n    const c1Length = c1.length\n    const c2Length = c2.length\n\n    const // set up the matching table\n        matches = Array(...new Array(c1Length + 1)).map(() => [])\n\n    const uniqueDescriptors = uniqueInBoth(c1, c2)\n\n    let // If all of the elements are the same tag, id and class, then we can\n        // consider them roughly the same even if they have a different number of\n        // children. This will reduce removing and re-adding similar elements.\n        subsetsSame = c1Length === c2Length\n\n    if (subsetsSame) {\n\n        c1.some((element, i) => {\n            const c1Desc = elementDescriptors(element)\n            const c2Desc = elementDescriptors(c2[i])\n            if (c1Desc.length !== c2Desc.length) {\n                subsetsSame = false\n                return true\n            }\n            c1Desc.some((description, i) => {\n                if (description !== c2Desc[i]) {\n                    subsetsSame = false\n                    return true\n                }\n            })\n            if (!subsetsSame) {\n                return true\n            }\n        })\n    }\n\n    // fill the matches with distance values\n    for (let c1Index = 0; c1Index < c1Length; c1Index++) {\n        const c1Element = c1[c1Index]\n        for (let c2Index = 0; c2Index < c2Length; c2Index++) {\n            const c2Element = c2[c2Index]\n            if (!marked1[c1Index] && !marked2[c2Index] && roughlyEqual(c1Element, c2Element, uniqueDescriptors, subsetsSame)) {\n                matches[c1Index + 1][c2Index + 1] = (matches[c1Index][c2Index] ? matches[c1Index][c2Index] + 1 : 1)\n                if (matches[c1Index + 1][c2Index + 1] >= lcsSize) {\n                    lcsSize = matches[c1Index + 1][c2Index + 1]\n                    index = [c1Index + 1, c2Index + 1]\n                }\n            } else {\n                matches[c1Index + 1][c2Index + 1] = 0\n            }\n        }\n    }\n\n    if (lcsSize === 0) {\n        return false\n    }\n\n    return {\n        oldValue: index[0] - lcsSize,\n        newValue: index[1] - lcsSize,\n        length: lcsSize\n    }\n}\n\n/**\n * This should really be a predefined function in Array...\n */\nfunction makeArray(n, v) {\n    return Array(...new Array(n)).map(() => v)\n}\n\n/**\n * Generate arrays that indicate which node belongs to which subset,\n * or whether it's actually an orphan node, existing in only one\n * of the two trees, rather than somewhere in both.\n *\n * So if t1 = <img><canvas><br>, t2 = <canvas><br><img>.\n * The longest subset is \"<canvas><br>\" (length 2), so it will group 0.\n * The second longest is \"<img>\" (length 1), so it will be group 1.\n * gaps1 will therefore be [1,0,0] and gaps2 [0,0,1].\n *\n * If an element is not part of any group, it will stay being 'true', which\n * is the initial value. For example:\n * t1 = <img><p></p><br><canvas>, t2 = <b></b><br><canvas><img>\n *\n * The \"<p></p>\" and \"<b></b>\" do only show up in one of the two and will\n * therefore be marked by \"true\". The remaining parts are parts of the\n * groups 0 and 1:\n * gaps1 = [1, true, 0, 0], gaps2 = [true, 0, 0, 1]\n *\n */\nexport function getGapInformation(t1, t2, stable) {\n    const gaps1 = t1.childNodes ? makeArray(t1.childNodes.length, true) : []\n    const gaps2 = t2.childNodes ? makeArray(t2.childNodes.length, true) : []\n    let group = 0\n\n    // give elements from the same subset the same group number\n    stable.forEach(subset => {\n        const endOld = subset.oldValue + subset.length\n        const endNew = subset.newValue + subset.length\n\n        for (let j = subset.oldValue; j < endOld; j += 1) {\n            gaps1[j] = group\n        }\n        for (let j = subset.newValue; j < endNew; j += 1) {\n            gaps2[j] = group\n        }\n        group += 1\n    })\n\n    return {\n        gaps1,\n        gaps2\n    }\n}\n\n/**\n * Find all matching subsets, based on immediate child differences only.\n */\nexport function markSubTrees(oldTree, newTree) {\n    // note: the child lists are views, and so update as we update old/newTree\n    const oldChildren = oldTree.childNodes ? oldTree.childNodes : []\n\n    const newChildren = newTree.childNodes ? newTree.childNodes : []\n    const marked1 = makeArray(oldChildren.length, false)\n    const marked2 = makeArray(newChildren.length, false)\n    const subsets = []\n    let subset = true\n\n    const returnIndex = function() {\n        return arguments[1]\n    }\n\n    const markBoth = i => {\n        marked1[subset.oldValue + i] = true\n        marked2[subset.newValue + i] = true\n    }\n\n    while (subset) {\n        subset = findCommonSubsets(oldChildren, newChildren, marked1, marked2)\n        if (subset) {\n            subsets.push(subset)\n            const subsetArray = Array(...new Array(subset.length)).map(returnIndex)\n            subsetArray.forEach(item => markBoth(item))\n        }\n    }\n\n    oldTree.subsets = subsets\n    oldTree.subsetsAge = 100\n    return subsets\n}\n\nexport class DiffTracker {\n    constructor() {\n        this.list = []\n    }\n\n    add(diffs) {\n        this.list.push(...diffs)\n    }\n    forEach(fn) {\n        this.list.forEach(li => fn(li))\n    }\n\n}\n","import {cloneObj} from \"./helpers\"\n\n// ===== Apply a virtual diff =====\nlet the_counter = 0\nfunction getFromVirtualRoute(tree, route) {\n    let node = tree\n    let parentNode\n    let nodeIndex\n\n    route = route.slice()\n    while (route.length > 0) {\n        if (!node.childNodes) {\n            return false\n        }\n        nodeIndex = route.splice(0, 1)[0]\n        parentNode = node\n        node = node.childNodes[nodeIndex]\n    }\n    return {\n        node,\n        parentNode,\n        nodeIndex\n    }\n}\n\nfunction applyVirtualDiff(\n        tree,\n        diff,\n        options // {preVirtualDiffApply, postVirtualDiffApply, _const}\n    ) {\n    const routeInfo = getFromVirtualRoute(tree, diff[options._const.route])\n    let node = routeInfo.node\n    const parentNode = routeInfo.parentNode\n    const nodeIndex = routeInfo.nodeIndex\n    const newSubsets = []\n\n    // pre-diff hook\n    const info = {\n        diff,\n        node\n    }\n\n    if (options.preVirtualDiffApply(info)) {\n        return true\n    }\n\n    let newNode\n    let nodeArray\n    let route\n    let c\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            if (!node.attributes) {\n                node.attributes = {}\n            }\n\n            node.attributes[diff[options._const.name]] = diff[options._const.value]\n\n            if (diff[options._const.name] === 'checked') {\n                node.checked = true\n            } else if (diff[options._const.name] === 'selected') {\n                node.selected = true\n            } else if (node.nodeName === 'INPUT' && diff[options._const.name] === 'value') {\n                node.value = diff[options._const.value]\n            }\n\n            break\n        case options._const.modifyAttribute:\n            node.attributes[diff[options._const.name]] = diff[options._const.newValue]\n            break\n        case options._const.removeAttribute:\n\n            delete node.attributes[diff[options._const.name]]\n\n            if (Object.keys(node.attributes).length === 0) {\n                delete node.attributes\n            }\n\n            if (diff[options._const.name] === 'checked') {\n                node.checked = false\n            } else if (diff[options._const.name] === 'selected') {\n                delete node.selected\n            } else if (node.nodeName === 'INPUT' && diff[options._const.name] === 'value') {\n                delete node.value\n            }\n\n            break\n        case options._const.modifyTextElement:\n            node.data = diff[options._const.newValue]\n            break\n        case options._const.modifyValue:\n            node.value = diff[options._const.newValue]\n            break\n        case options._const.modifyComment:\n            node.data = diff[options._const.newValue]\n            break\n        case options._const.modifyChecked:\n            node.checked = diff[options._const.newValue]\n            break\n        case options._const.modifySelected:\n            node.selected = diff[options._const.newValue]\n            break\n        case options._const.replaceElement:\n            newNode = cloneObj(diff[options._const.newValue])\n            newNode.outerDone = true\n            newNode.innerDone = true\n            newNode.valueDone = true\n            parentNode.childNodes[nodeIndex] = newNode\n            break\n        case options._const.relocateGroup:\n            nodeArray = node.childNodes.splice(diff[options._const.from], diff.groupLength).reverse()\n            nodeArray.forEach(movedNode => node.childNodes.splice(diff[options._const.to], 0, movedNode))\n            if (node.subsets) {\n                //console.log({subsets: JSON.stringify(node.subsets)})\n                node.subsets.forEach(map => {\n                    if (\n                        diff[options._const.from] < diff[options._const.to] &&\n                        map.oldValue > diff[options._const.from] &&\n                        map.oldValue <= diff[options._const.to] + diff.groupLength\n                    ) {\n                        map.oldValue -= diff.groupLength\n                        const splitLength = map.oldValue + map.length - diff[options._const.to]\n                        if (splitLength > 0) {\n                            // new insertion splits map.\n                            newSubsets.push({\n                                oldValue: diff[options._const.to] + diff.groupLength,\n                                newValue: map.newValue + map.length - splitLength,\n                                length: splitLength\n                            })\n                            map.length -= splitLength\n                        }\n                    } else if (\n                        diff[options._const.from] > diff[options._const.to] &&\n                        map.oldValue >= diff[options._const.to] &&\n                        map.oldValue < diff[options._const.from]\n                    ) {\n                        map.oldValue += diff.groupLength\n                        const splitLength = map.oldValue + map.length - diff[options._const.to]\n                        if (splitLength > 0) {\n                            // new insertion splits map.\n                            newSubsets.push({\n                                oldValue: diff[options._const.to] + diff.groupLength,\n                                newValue: map.newValue + map.length - splitLength,\n                                length: splitLength\n                            })\n                            map.length -= splitLength\n                        }\n                    } else if (map.oldValue === diff[options._const.from]) {\n                        map.oldValue = diff[options._const.to]\n                    }\n                })\n                //console.log({subsets: JSON.stringify(node.subsets), newSubsets: JSON.stringify(newSubsets)})\n            }\n\n            break\n        case options._const.removeElement:\n            parentNode.childNodes.splice(nodeIndex, 1)\n            if (parentNode.subsets) {\n                parentNode.subsets.forEach(map => {\n                    if (map.oldValue > nodeIndex) {\n                        map.oldValue -= 1\n                    } else if (map.oldValue === nodeIndex) {\n                        map.delete = true\n                    } else if (map.oldValue < nodeIndex && (map.oldValue + map.length) > nodeIndex) {\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\n                            map.length--\n                        } else {\n                            newSubsets.push({\n                                newValue: map.newValue + nodeIndex - map.oldValue,\n                                oldValue: nodeIndex,\n                                length: map.length - nodeIndex + map.oldValue - 1\n                            })\n                            map.length = nodeIndex - map.oldValue\n                        }\n                    }\n                })\n            }\n            node = parentNode\n            break\n        case options._const.addElement:\n            route = diff[options._const.route].slice()\n            c = route.splice(route.length - 1, 1)[0]\n            node = getFromVirtualRoute(tree, route).node\n            newNode = cloneObj(diff[options._const.element])\n            newNode.outerDone = true\n            newNode.innerDone = true\n            newNode.valueDone = true\n\n            if (!node.childNodes) {\n                node.childNodes = []\n            }\n\n            if (c >= node.childNodes.length) {\n                node.childNodes.push(newNode)\n            } else {\n                node.childNodes.splice(c, 0, newNode)\n            }\n            if (node.subsets) {\n                //node.cachedSubsets = true\n                //delete node.subsets\n                node.subsets.forEach(map => {\n                    if (map.oldValue >= c) {\n                        map.oldValue += 1\n                    } else if (map.oldValue < c && (map.oldValue + map.length) > c) {\n                        const splitLength = map.oldValue + map.length - c\n                        newSubsets.push({\n                            newValue: map.newValue + map.length - splitLength,\n                            oldValue: c + 1,\n                            length: splitLength\n                        })\n                        map.length -= splitLength\n                    }\n                })\n                const mnewSubsets = []\n                if (the_counter < 1) {\n                    newSubsets.push({\n                        oldValue: c,\n                        newValue: c,\n                        length: 1\n                    })\n                    the_counter += 1\n                    console.log(mnewSubsets)\n                    console.log(node.subsets)\n                    console.log(newSubsets)\n                } else if (the_counter < 2) {\n                    mnewSubsets.push({\n                        oldValue: c,\n                        newValue: c,\n                        length: 1\n                    })\n                    the_counter += 1\n                    console.log(mnewSubsets)\n                    console.log(node.subsets)\n                    console.log(newSubsets)\n                }\n\n                //if (node.subsets.find(subset => subset.oldValue === c || subset.newValue === c)) {\n\n                //}\n            }\n            break\n        case options._const.removeTextElement:\n            parentNode.childNodes.splice(nodeIndex, 1)\n            if (parentNode.nodeName === 'TEXTAREA') {\n                delete parentNode.value\n            }\n            if (parentNode.subsets) {\n                parentNode.subsets.forEach(map => {\n                    if (map.oldValue > nodeIndex) {\n                        map.oldValue -= 1\n                    } else if (map.oldValue === nodeIndex) {\n                        map.delete = true\n                    } else if (map.oldValue < nodeIndex && (map.oldValue + map.length) > nodeIndex) {\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\n                            map.length--\n                        } else {\n                            newSubsets.push({\n                                newValue: map.newValue + nodeIndex - map.oldValue,\n                                oldValue: nodeIndex,\n                                length: map.length - nodeIndex + map.oldValue - 1\n                            })\n                            map.length = nodeIndex - map.oldValue\n                        }\n                    }\n                })\n            }\n            node = parentNode\n            break\n        case options._const.addTextElement:\n            route = diff[options._const.route].slice()\n            c = route.splice(route.length - 1, 1)[0]\n            newNode = {}\n            newNode.nodeName = '#text'\n            newNode.data = diff[options._const.value]\n            node = getFromVirtualRoute(tree, route).node\n            if (!node.childNodes) {\n                node.childNodes = []\n            }\n\n            if (c >= node.childNodes.length) {\n                node.childNodes.push(newNode)\n            } else {\n                node.childNodes.splice(c, 0, newNode)\n            }\n            if (node.nodeName === 'TEXTAREA') {\n                node.value = diff[options._const.newValue]\n            }\n            if (node.subsets) {\n                node.subsets.forEach(map => {\n                    if (map.oldValue >= c) {\n                        map.oldValue += 1\n                    }\n                    if (map.oldValue < c && (map.oldValue + map.length) > c) {\n                        const splitLength = map.oldValue + map.length - c\n                        newSubsets.push({\n                            newValue: map.newValue + map.length - splitLength,\n                            oldValue: c + 1,\n                            length: splitLength\n                        })\n                        map.length -= splitLength\n                    }\n                })\n            }\n            break\n        default:\n            console.log('unknown action')\n    }\n\n    if (node.subsets) {\n        node.subsets = node.subsets.filter(map => !map.delete)\n        if (newSubsets.length) {\n            node.subsets = node.subsets.concat(newSubsets)\n            //console.log(JSON.stringify(node.subsets))\n        }\n    }\n\n    // capture newNode for the callback\n    info.newNode = newNode\n    options.postVirtualDiffApply(info)\n\n    return\n}\n\nexport function applyVirtual(tree, diffs, options) {\n    diffs.forEach(diff => {\n        applyVirtualDiff(tree, diff, options)\n    })\n    return true\n}\n","export function nodeToObj(aNode, options = {}) {\n    const objNode = {}\n    objNode.nodeName = aNode.nodeName\n    if (objNode.nodeName === '#text' || objNode.nodeName === '#comment') {\n        objNode.data = aNode.data\n    } else {\n        if (aNode.attributes && aNode.attributes.length > 0) {\n            objNode.attributes = {}\n            const nodeArray = Array.prototype.slice.call(aNode.attributes)\n            nodeArray.forEach(attribute => objNode.attributes[attribute.name] = attribute.value)\n        }\n        if (objNode.nodeName === 'TEXTAREA') {\n            objNode.value = aNode.value\n        } else if (aNode.childNodes && aNode.childNodes.length > 0) {\n            objNode.childNodes = []\n            const nodeArray = Array.prototype.slice.call(aNode.childNodes)\n            nodeArray.forEach(childNode => objNode.childNodes.push(nodeToObj(childNode, options)))\n        }\n        if (options.valueDiffing) {\n            if (aNode.checked !== undefined && aNode.type && ['radio', 'checkbox'].includes(aNode.type.toLowerCase())) {\n                objNode.checked = aNode.checked\n            } else if (aNode.value !== undefined) {\n                objNode.value = aNode.value\n            }\n            if (aNode.selected !== undefined) {\n                objNode.selected = aNode.selected\n            }\n        }\n    }\n    return objNode\n}\n","// from html-parse-stringify (MIT)\n\nconst tagRE = /<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>/g\n// re-used obj for quick lookups of components\nconst empty = Object.create ? Object.create(null) : {}\nconst attrRE = /\\s([^'\"/\\s><]+?)[\\s/>]|([^\\s=]+)=\\s?(\".*?\"|'.*?')/g\n\n\nfunction unescape(string) {\n    return string.replace(/&lt;/g, '<').replace(/&gt;/g, '>')\n.replace(/&amp;/g, '&')\n}\n\n// create optimized lookup object for\n// void elements as listed here:\n// http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\nconst lookup = {\n    area: true,\n    base: true,\n    br: true,\n    col: true,\n    embed: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    menuItem: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true\n}\n\n\nfunction parseTag(tag) {\n    const res = {\n        nodeName: '',\n        attributes: {}\n    }\n\n    let tagMatch = tag.match(/<\\/?([^\\s]+?)[/\\s>]/)\n    if (tagMatch) {\n        res.nodeName = tagMatch[1].toUpperCase()\n        if (lookup[tagMatch[1].toLowerCase()] || tag.charAt(tag.length - 2) === '/') {\n            res.voidElement = true\n        }\n\n        // handle comment tag\n        if (res.nodeName.startsWith('!--')) {\n            const endIndex = tag.indexOf('-->')\n            return {\n                type: 'comment',\n                data: endIndex !== -1 ? tag.slice(4, endIndex) : ''\n            }\n        }\n    }\n\n    let reg = new RegExp(attrRE)\n    let result = null\n    let done = false\n    while (!done) {\n        result = reg.exec(tag)\n\n        if (result === null) {\n            done = true\n        } else if (result[0].trim()) {\n            if (result[1]) {\n                let attr = result[1].trim()\n                let arr = [attr, \"\"]\n\n                if (attr.indexOf(\"=\") > -1) arr = attr.split(\"=\")\n\n                res.attributes[arr[0]] = arr[1]\n                reg.lastIndex--\n            } else if (result[2]) res.attributes[result[2]] = result[3].trim().substring(1, result[3].length - 1)\n        }\n    }\n\n    return res\n}\n\nfunction parse(\n    html,\n    options = {components: empty}\n) {\n    const result = []\n    let current\n    let level = -1\n    const arr = []\n    let inComponent = false\n\n    html.replace(tagRE, (tag, index) => {\n        if (inComponent) {\n            if (tag !== (`</${current.nodeName}>`)) {\n                return\n            } else {\n                inComponent = false\n            }\n        }\n        const isOpen = tag.charAt(1) !== '/'\n        const isComment = tag.startsWith('<!--')\n        const start = index + tag.length\n        const nextChar = html.charAt(start)\n        let parent\n\n        if (isComment) {\n            const comment = parseTag(tag)\n\n            // if we're at root, push new base node\n            if (level < 0) {\n                result.push(comment)\n                return result\n            }\n            parent = arr[level]\n            if (parent) {\n                if (!parent.childNodes) {\n                    parent.childNodes = []\n                }\n                parent.childNodes.push(comment)\n            }\n\n            return result\n        }\n\n        if (isOpen) {\n            current = parseTag(tag)\n            level++\n            if (current.type === 'tag' && options.components[current.nodeName]) {\n                current.type = 'component'\n                inComponent = true\n            }\n\n            if (!current.voidElement && !inComponent && nextChar && nextChar !== '<') {\n                if (!current.childNodes) {\n                    current.childNodes = []\n                }\n                current.childNodes.push({\n                    nodeName: '#text',\n                    data: unescape(html.slice(start, html.indexOf('<', start)))\n                })\n            }\n\n            // if we're at root, push new base node\n            if (level === 0) {\n                result.push(current)\n            }\n\n            parent = arr[level - 1]\n\n            if (parent) {\n                if (!parent.childNodes) {\n                    parent.childNodes = []\n                }\n                parent.childNodes.push(current)\n            }\n\n            arr[level] = current\n        }\n\n        if (!isOpen || current.voidElement) {\n            level--\n            if (!inComponent && nextChar !== '<' && nextChar) {\n                // trailing text node\n                // if we're at the root, push a base text node. otherwise add as\n                // a child to the current node.\n                parent = level === -1 ? result : arr[level].childNodes || []\n\n                // calculate correct end of the data slice in case there's\n                // no tag after the text node.\n                const end = html.indexOf('<', start)\n                const data = unescape(html.slice(start, end === -1 ? undefined : end))\n                parent.push({\n                    nodeName: '#text',\n                    data\n                })\n            }\n        }\n    })\n\n    return result[0]\n}\n\nfunction cleanObj(obj) {\n    delete obj.voidElement\n    if (obj.childNodes) {\n        obj.childNodes.forEach(child => cleanObj(child))\n    }\n    return obj\n}\n\nexport function stringToObj(string) {\n    return cleanObj(parse(string))\n}\n","import {Diff, DiffTracker, cloneObj, getGapInformation, isEqual, markSubTrees, removeDone, roughlyEqual} from \"./helpers\"\nimport {applyVirtual} from \"./apply\"\nimport {nodeToObj} from \"./fromDOM\"\nimport {stringToObj} from \"./fromString\"\n\n// ===== Create a diff =====\n\nexport class DiffFinder {\n    constructor(t1Node, t2Node, options) {\n        this.options = options\n        this.t1 = (t1Node instanceof HTMLElement) ? nodeToObj(t1Node, this.options) : (typeof t1Node === 'string') ? stringToObj(t1Node, this.options) : JSON.parse(JSON.stringify(t1Node))\n        this.t2 = (t2Node instanceof HTMLElement) ? nodeToObj(t2Node, this.options) : (typeof t2Node === 'string') ? stringToObj(t2Node, this.options) : JSON.parse(JSON.stringify(t2Node))\n        this.diffcount = 0\n        this.foundAll = false\n        if (this.debug) {\n            this.t1Orig = nodeToObj(t1Node, this.options)\n            this.t2Orig = nodeToObj(t2Node, this.options)\n        }\n\n        this.tracker = new DiffTracker()\n    }\n\n    init() {\n        return this.findDiffs(this.t1, this.t2)\n    }\n\n    findDiffs(t1, t2) {\n        let diffs\n        do {\n            if (this.options.debug) {\n                this.diffcount += 1\n                if (this.diffcount > this.options.diffcap) {\n                    window.diffError = [this.t1Orig, this.t2Orig]\n                    throw new Error(`surpassed diffcap:${JSON.stringify(this.t1Orig)} -> ${JSON.stringify(this.t2Orig)}`)\n                }\n            }\n            diffs = this.findNextDiff(t1, t2, [])\n\n            if (diffs.length === 0) {\n                // Last check if the elements really are the same now.\n                // If not, remove all info about being done and start over.\n                // Sometimes a node can be marked as done, but the creation of subsequent diffs means that it has to be changed again.\n                if (!isEqual(t1, t2)) {\n                    if (this.foundAll) {\n                        console.error('Could not find remaining diffs!')\n                    } else {\n                        this.foundAll = true\n                        removeDone(t1)\n                        diffs = this.findNextDiff(t1, t2, [])\n                    }\n                }\n            }\n            if (diffs.length > 0) {\n                this.foundAll = false\n                this.tracker.add(diffs)\n                applyVirtual(t1, diffs, this.options)\n            }\n        } while (diffs.length > 0)\n\n        return this.tracker.list\n    }\n\n    findNextDiff(t1, t2, route) {\n        let diffs\n        let fdiffs\n\n        if (this.options.maxDepth && route.length > this.options.maxDepth) {\n            return []\n        }\n        // outer differences?\n        if (!t1.outerDone) {\n            diffs = this.findOuterDiff(t1, t2, route)\n            if (this.options.filterOuterDiff) {\n                fdiffs = this.options.filterOuterDiff(t1, t2, diffs)\n                if (fdiffs) diffs = fdiffs\n            }\n            if (diffs.length > 0) {\n                t1.outerDone = true\n                return diffs\n            } else {\n                t1.outerDone = true\n            }\n        }\n        // inner differences?\n        if (!t1.innerDone) {\n            diffs = this.findInnerDiff(t1, t2, route)\n            if (diffs.length > 0) {\n                return diffs\n            } else {\n                t1.innerDone = true\n            }\n        }\n\n        if (this.options.valueDiffing && !t1.valueDone) {\n            // value differences?\n            diffs = this.findValueDiff(t1, t2, route)\n\n            if (diffs.length > 0) {\n                t1.valueDone = true\n                return diffs\n            } else {\n                t1.valueDone = true\n            }\n        }\n\n        // no differences\n        return []\n    }\n\n    findOuterDiff(t1, t2, route) {\n        const diffs = []\n        let attr\n        let attr1\n        let attr2\n        let attrLength\n        let pos\n        let i\n        if (t1.nodeName !== t2.nodeName) {\n            if (!route.length) {\n                throw new Error('Top level nodes have to be of the same kind.')\n            }\n            return [new Diff()\n                .setValue(this.options._const.action, this.options._const.replaceElement)\n                .setValue(this.options._const.oldValue, cloneObj(t1))\n                .setValue(this.options._const.newValue, cloneObj(t2))\n                .setValue(this.options._const.route, route)\n            ]\n        }\n        if (route.length && this.options.maxNodeDiffCount < Math.abs((t1.childNodes || []).length - (t2.childNodes || []).length)) {\n            return [new Diff()\n                .setValue(this.options._const.action, this.options._const.replaceElement)\n                .setValue(this.options._const.oldValue, cloneObj(t1))\n                .setValue(this.options._const.newValue, cloneObj(t2))\n                .setValue(this.options._const.route, route)\n            ]\n        }\n\n        if (t1.data !== t2.data) {\n            // Comment or text node.\n            if (t1.nodeName === '#text') {\n                return [new Diff()\n                    .setValue(this.options._const.action, this.options._const.modifyTextElement)\n                    .setValue(this.options._const.route, route)\n                    .setValue(this.options._const.oldValue, t1.data)\n                    .setValue(this.options._const.newValue, t2.data)\n                ]\n            } else {\n                return [new Diff()\n                    .setValue(this.options._const.action, this.options._const.modifyComment)\n                    .setValue(this.options._const.route, route)\n                    .setValue(this.options._const.oldValue, t1.data)\n                    .setValue(this.options._const.newValue, t2.data)\n                ]\n            }\n\n        }\n\n        attr1 = t1.attributes ? Object.keys(t1.attributes).sort() : []\n        attr2 = t2.attributes ? Object.keys(t2.attributes).sort() : []\n\n        attrLength = attr1.length\n        for (i = 0; i < attrLength; i++) {\n            attr = attr1[i]\n            pos = attr2.indexOf(attr)\n            if (pos === -1) {\n                diffs.push(new Diff()\n                    .setValue(this.options._const.action, this.options._const.removeAttribute)\n                    .setValue(this.options._const.route, route)\n                    .setValue(this.options._const.name, attr)\n                    .setValue(this.options._const.value, t1.attributes[attr])\n                )\n            } else {\n                attr2.splice(pos, 1)\n                if (t1.attributes[attr] !== t2.attributes[attr]) {\n                    diffs.push(new Diff()\n                        .setValue(this.options._const.action, this.options._const.modifyAttribute)\n                        .setValue(this.options._const.route, route)\n                        .setValue(this.options._const.name, attr)\n                        .setValue(this.options._const.oldValue, t1.attributes[attr])\n                        .setValue(this.options._const.newValue, t2.attributes[attr])\n                    )\n                }\n            }\n        }\n\n        attrLength = attr2.length\n        for (i = 0; i < attrLength; i++) {\n            attr = attr2[i]\n            diffs.push(new Diff()\n                .setValue(this.options._const.action, this.options._const.addAttribute)\n                .setValue(this.options._const.route, route)\n                .setValue(this.options._const.name, attr)\n                .setValue(this.options._const.value, t2.attributes[attr])\n            )\n        }\n\n        return diffs\n    }\n\n    findInnerDiff(t1, t2, route) {\n        const t1ChildNodes = t1.childNodes ? t1.childNodes.slice() : []\n        const t2ChildNodes = t2.childNodes ? t2.childNodes.slice() : []\n        const last = Math.max(t1ChildNodes.length, t2ChildNodes.length)\n        let childNodesLengthDifference = Math.abs(t1ChildNodes.length - t2ChildNodes.length)\n        let diffs = []\n        let index = 0\n        if (!this.options.maxChildCount || last < this.options.maxChildCount) {\n            const subtrees = t1.subsets && t1.subsetsAge-- ? t1.subsets : (t1.childNodes && t2.childNodes) ? markSubTrees(t1, t2) : []\n            if (subtrees.length > 0) {\n                /* One or more groups have been identified among the childnodes of t1\n                 * and t2.\n                 */\n                diffs = this.attemptGroupRelocation(t1, t2, subtrees, route)\n                if (diffs.length > 0) {\n                    return diffs\n                }\n            }\n        }\n\n\n        /* 0 or 1 groups of similar child nodes have been found\n         * for t1 and t2. 1 If there is 1, it could be a sign that the\n         * contents are the same. When the number of groups is below 2,\n         * t1 and t2 are made to have the same length and each of the\n         * pairs of child nodes are diffed.\n         */\n\n        for (let i = 0; i < last; i += 1) {\n            const e1 = t1ChildNodes[i]\n            const e2 = t2ChildNodes[i]\n\n            if (childNodesLengthDifference) {\n                /* t1 and t2 have different amounts of childNodes. Add\n                 * and remove as necessary to obtain the same length */\n                if (e1 && !e2) {\n                    if (e1.nodeName === '#text') {\n                        diffs.push(new Diff()\n                            .setValue(this.options._const.action, this.options._const.removeTextElement)\n                            .setValue(this.options._const.route, route.concat(index))\n                            .setValue(this.options._const.value, e1.data)\n                        )\n                        index -= 1\n                    } else {\n                        diffs.push(new Diff()\n                            .setValue(this.options._const.action, this.options._const.removeElement)\n                            .setValue(this.options._const.route, route.concat(index))\n                            .setValue(this.options._const.element, cloneObj(e1))\n                        )\n                        index -= 1\n                    }\n\n                } else if (e2 && !e1) {\n                    if (e2.nodeName === '#text') {\n                        diffs.push(new Diff()\n                            .setValue(this.options._const.action, this.options._const.addTextElement)\n                            .setValue(this.options._const.route, route.concat(index))\n                            .setValue(this.options._const.value, e2.data)\n                        )\n                    } else {\n                        diffs.push(new Diff()\n                            .setValue(this.options._const.action, this.options._const.addElement)\n                            .setValue(this.options._const.route, route.concat(index))\n                            .setValue(this.options._const.element, cloneObj(e2))\n                        )\n                    }\n                }\n            }\n            /* We are now guaranteed that childNodes e1 and e2 exist,\n             * and that they can be diffed.\n             */\n            /* Diffs in child nodes should not affect the parent node,\n             * so we let these diffs be submitted together with other\n             * diffs.\n             */\n\n            if (e1 && e2) {\n                if (!this.options.maxChildCount || last < this.options.maxChildCount) {\n                    diffs = diffs.concat(this.findNextDiff(e1, e2, route.concat(index)))\n                } else if (!isEqual(e1, e2)) {\n                    if (t1ChildNodes.length > t2ChildNodes.length) {\n                        if (e1.nodeName === '#text') {\n                            diffs.push(new Diff()\n                                .setValue(this.options._const.action, this.options._const.removeTextElement)\n                                .setValue(this.options._const.route, route.concat(index))\n                                .setValue(this.options._const.value, e1.data)\n                            )\n                        } else {\n                            diffs.push(\n                                new Diff()\n                                    .setValue(this.options._const.action, this.options._const.removeElement)\n                                    .setValue(this.options._const.element, cloneObj(e1))\n                                    .setValue(this.options._const.route, route.concat(index))\n                            )\n                        }\n                        t1ChildNodes.splice(i, 1)\n                        i -= 1\n                        index -= 1\n\n                        childNodesLengthDifference -= 1\n                    } else if (t1ChildNodes.length < t2ChildNodes.length) {\n                        diffs = diffs.concat([\n                            new Diff()\n                                .setValue(this.options._const.action, this.options._const.addElement)\n                                .setValue(this.options._const.element, cloneObj(e2))\n                                .setValue(this.options._const.route, route.concat(index))\n                        ])\n                        t1ChildNodes.splice(i, 0, {})\n                        childNodesLengthDifference -= 1\n                    } else {\n                        diffs = diffs.concat([\n                            new Diff()\n                                .setValue(this.options._const.action, this.options._const.replaceElement)\n                                .setValue(this.options._const.oldValue, cloneObj(e1))\n                                .setValue(this.options._const.newValue, cloneObj(e2))\n                                .setValue(this.options._const.route, route.concat(index))\n                        ])\n                    }\n\n                }\n\n            }\n            index += 1\n\n        }\n        t1.innerDone = true\n        return diffs\n    }\n\n    attemptGroupRelocation(t1, t2, subtrees, route) {\n        /* Either t1.childNodes and t2.childNodes have the same length, or\n         * there are at least two groups of similar elements can be found.\n         * attempts are made at equalizing t1 with t2. First all initial\n         * elements with no group affiliation (gaps=true) are removed (if\n         * only in t1) or added (if only in t2). Then the creation of a group\n         * relocation diff is attempted.\n         */\n        const gapInformation = getGapInformation(t1, t2, subtrees)\n        const gaps1 = gapInformation.gaps1\n        const gaps2 = gapInformation.gaps2\n        let shortest = Math.min(gaps1.length, gaps2.length)\n        let destinationDifferent\n        let toGroup\n        let group\n        let node\n        let similarNode\n        let testI\n        const diffs = []\n\n        for (let index2 = 0, index1 = 0; index2 < shortest; index1 += 1, index2 += 1) {\n            if (gaps1[index2] === true) {\n                node = t1.childNodes[index1]\n                if (node.nodeName === '#text') {\n                    if (t2.childNodes[index2].nodeName === '#text') {\n                        if (node.data !== t2.childNodes[index2].data) {\n                            testI = index1\n                            while (t1.childNodes.length > testI + 1 && t1.childNodes[testI + 1].nodeName === '#text') {\n                                testI += 1\n                                if (t2.childNodes[index2].data === t1.childNodes[testI].data) {\n                                    similarNode = true\n                                    break\n                                }\n                            }\n                            if (!similarNode) {\n                                diffs.push(new Diff()\n                                    .setValue(this.options._const.action, this.options._const.modifyTextElement)\n                                    .setValue(this.options._const.route, route.concat(index2))\n                                    .setValue(this.options._const.oldValue, node.data)\n                                    .setValue(this.options._const.newValue, t2.childNodes[index2].data)\n                                )\n                                return diffs\n                            }\n                        }\n                    } else {\n                        diffs.push(new Diff()\n                            .setValue(this.options._const.action, this.options._const.removeTextElement)\n                            .setValue(this.options._const.route, route.concat(index2))\n                            .setValue(this.options._const.value, node.data)\n                        )\n                        gaps1.splice(index2, 1)\n                        shortest = Math.min(gaps1.length, gaps2.length)\n                        index2 -= 1\n                    }\n                } else {\n                    diffs.push(new Diff()\n                        .setValue(this.options._const.action, this.options._const.removeElement)\n                        .setValue(this.options._const.route, route.concat(index2))\n                        .setValue(this.options._const.element, cloneObj(node))\n                    )\n                    gaps1.splice(index2, 1)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index2 -= 1\n                }\n\n            } else if (gaps2[index2] === true) {\n                node = t2.childNodes[index2]\n                if (node.nodeName === '#text') {\n                    diffs.push(new Diff()\n                        .setValue(this.options._const.action, this.options._const.addTextElement)\n                        .setValue(this.options._const.route, route.concat(index2))\n                        .setValue(this.options._const.value, node.data)\n                    )\n                    gaps1.splice(index2, 0, true)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index1 -= 1\n                } else {\n                    diffs.push(new Diff()\n                        .setValue(this.options._const.action, this.options._const.addElement)\n                        .setValue(this.options._const.route, route.concat(index2))\n                        .setValue(this.options._const.element, cloneObj(node))\n                    )\n                    gaps1.splice(index2, 0, true)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index1 -= 1\n                }\n\n            } else if (gaps1[index2] !== gaps2[index2]) {\n                if (diffs.length > 0) {\n                    return diffs\n                }\n                // group relocation\n                group = subtrees[gaps1[index2]]\n                toGroup = Math.min(group.newValue, (t1.childNodes.length - group.length))\n                if (toGroup !== group.oldValue) {\n                    // Check whether destination nodes are different than originating ones.\n                    destinationDifferent = false\n                    for (let j = 0; j < group.length; j += 1) {\n                        if (!roughlyEqual(t1.childNodes[toGroup + j], t1.childNodes[group.oldValue + j], [], false, true)) {\n                            destinationDifferent = true\n                        }\n                    }\n                    if (destinationDifferent) {\n                        return [new Diff()\n                            .setValue(this.options._const.action, this.options._const.relocateGroup)\n                            .setValue('groupLength', group.length)\n                            .setValue(this.options._const.from, group.oldValue)\n                            .setValue(this.options._const.to, toGroup)\n                            .setValue(this.options._const.route, route)\n                        ]\n                    }\n                }\n            }\n        }\n        return diffs\n    }\n\n    findValueDiff(t1, t2, route) {\n        // Differences of value. Only useful if the value/selection/checked value\n        // differs from what is represented in the DOM. For example in the case\n        // of filled out forms, etc.\n        const diffs = []\n\n        if (t1.selected !== t2.selected) {\n            diffs.push(new Diff()\n                .setValue(this.options._const.action, this.options._const.modifySelected)\n                .setValue(this.options._const.oldValue, t1.selected)\n                .setValue(this.options._const.newValue, t2.selected)\n                .setValue(this.options._const.route, route)\n            )\n        }\n\n        if ((t1.value || t2.value) && t1.value !== t2.value && t1.nodeName !== 'OPTION') {\n            diffs.push(new Diff()\n                .setValue(this.options._const.action, this.options._const.modifyValue)\n                .setValue(this.options._const.oldValue, t1.value || \"\")\n                .setValue(this.options._const.newValue, t2.value || \"\")\n                .setValue(this.options._const.route, route)\n            )\n        }\n        if (t1.checked !== t2.checked) {\n            diffs.push(new Diff()\n                .setValue(this.options._const.action, this.options._const.modifyChecked)\n                .setValue(this.options._const.oldValue, t1.checked)\n                .setValue(this.options._const.newValue, t2.checked)\n                .setValue(this.options._const.route, route)\n            )\n        }\n\n        return diffs\n    }\n\n}\n","import {applyDOM, undoDOM} from \"./dom/index\"\nimport {DiffFinder} from \"./virtual/index\"\nexport {nodeToObj, stringToObj} from \"./virtual/index\"\n\nconst DEFAULT_OPTIONS = {\n    debug: false,\n    diffcap: 10, // Limit for how many diffs are accepting when debugging. Inactive when debug is false.\n    maxDepth: false, // False or a numeral. If set to a numeral, limits the level of depth that the the diff mechanism looks for differences. If false, goes through the entire tree.\n    maxChildCount: 50, // False or a numeral. If set to a numeral, only does a simplified form of diffing of contents so that the number of diffs cannot be higher than the number of child nodes.\n    valueDiffing: true, // Whether to take into consideration the values of forms that differ from auto assigned values (when a user fills out a form).\n    // syntax: textDiff: function (node, currentValue, expectedValue, newValue)\n    textDiff(node, currentValue, expectedValue, newValue) {\n        node.data = newValue\n        return\n    },\n    // empty functions were benchmarked as running faster than both\n    // `f && f()` and `if (f) { f(); }`\n    preVirtualDiffApply() {},\n    postVirtualDiffApply() {},\n    preDiffApply() {},\n    postDiffApply() {},\n    filterOuterDiff: null,\n    compress: false, // Whether to work with compressed diffs\n    _const: false, // object with strings for every change types to be used in diffs.\n    document: window && window.document ? window.document : false\n}\n\n\nexport class DiffDOM {\n    constructor(options = {}) {\n\n        this.options = options\n        // IE11 doesn't have Object.assign and buble doesn't translate object spreaders\n        // by default, so this is the safest way of doing it currently.\n        Object.entries(DEFAULT_OPTIONS).forEach(([key, value]) => {\n            if (!Object.prototype.hasOwnProperty.call(this.options, key)) {\n                this.options[key] = value\n            }\n        })\n\n        if (!this.options._const) {\n            const varNames = [\"addAttribute\", \"modifyAttribute\", \"removeAttribute\",\n                \"modifyTextElement\", \"relocateGroup\", \"removeElement\", \"addElement\",\n                \"removeTextElement\", \"addTextElement\", \"replaceElement\", \"modifyValue\",\n                \"modifyChecked\", \"modifySelected\", \"modifyComment\", \"action\", \"route\",\n                \"oldValue\", \"newValue\", \"element\", \"group\", \"from\", \"to\", \"name\",\n                \"value\", \"data\", \"attributes\", \"nodeName\", \"childNodes\", \"checked\",\n                \"selected\"\n            ]\n            this.options._const = {}\n            if (this.options.compress) {\n                varNames.forEach((varName, index) => this.options._const[varName] = index)\n            } else {\n                varNames.forEach(varName => this.options._const[varName] = varName)\n            }\n        }\n\n        this.DiffFinder = DiffFinder\n\n    }\n\n    apply(tree, diffs) {\n        return applyDOM(tree, diffs, this.options)\n    }\n\n    undo(tree, diffs) {\n        return undoDOM(tree, diffs, this.options)\n    }\n\n    diff(t1Node, t2Node) {\n        const finder = new this.DiffFinder(t1Node, t2Node, this.options)\n        return finder.init()\n    }\n\n}\n","/**\n * Use TraceLogger to figure out function calls inside\n * JS objects by wrapping an object with a TraceLogger\n * instance.\n *\n * Pretty-prints the call trace (using unicode box code)\n * when tracelogger.toString() is called.\n */\n\n/**\n * Wrap an object by calling new TraceLogger(obj)\n *\n * If you're familiar with Python decorators, this\n * does roughly the same thing, adding pre/post\n * call hook logging calls so that you can see\n * what's going on.\n */\nexport class TraceLogger {\n    constructor(obj = {}) {\n        this.pad = \"│   \"\n        this.padding = \"\"\n        this.tick = 1\n        this.messages = []\n        const wrapkey = (obj, key) => {\n            // trace this function\n            const oldfn = obj[key]\n            obj[key] = (...args) => {\n                this.fin(key, Array.prototype.slice.call(args))\n                const result = oldfn.apply(obj, args)\n                this.fout(key, result)\n                return result\n            }\n        }\n        // can't use Object.keys for prototype walking\n        for (let key in obj) {\n            if (typeof obj[key] === \"function\") {\n                wrapkey(obj, key)\n            }\n        }\n        this.log(\"┌ TRACELOG START\")\n    }\n    // called when entering a function\n    fin(fn, args) {\n        this.padding += this.pad\n        this.log(`├─> entering ${fn}`, args)\n    }\n    // called when exiting a function\n    fout(fn, result) {\n        this.log(\"│<──┘ generated return value\", result)\n        this.padding = this.padding.substring(0, this.padding.length - this.pad.length)\n    }\n    // log message formatting\n    format(s, tick) {\n        let nf = function(t) {\n            t = `${t}`\n            while (t.length < 4) {\n                t = `0${t}`\n            }\n            return t\n        }\n        return `${nf(tick)}> ${this.padding}${s}`\n    }\n    // log a trace message\n    log() {\n        let s = Array.prototype.slice.call(arguments)\n        const stringCollapse = function(v) {\n            if (!v) {\n                return \"<falsey>\"\n            }\n            if (typeof v === \"string\") {\n                return v\n            }\n            if (v instanceof HTMLElement) {\n                return v.outerHTML || \"<empty>\"\n            }\n            if (v instanceof Array) {\n                return `[${v.map(stringCollapse).join(\",\")}]`\n            }\n            return v.toString() || v.valueOf() || \"<unknown>\"\n        }\n        s = s.map(stringCollapse).join(\", \")\n        this.messages.push(this.format(s, this.tick++))\n    }\n    // turn the log into a structured string with\n    // unicode box codes to make it a sensible trace.\n    toString() {\n        let cap = \"×   \"\n        let terminator = \"└───\"\n        while (terminator.length <= this.padding.length + this.pad.length) {\n            terminator += cap\n        }\n        let _ = this.padding\n        this.padding = \"\"\n        terminator = this.format(terminator, this.tick)\n        this.padding = _\n        return `${this.messages.join(\"\\n\")}\\n${terminator}`\n    }\n}\n"],"names":["objToNode","objNode","insideSvg","options","let","node","nodeName","document","createTextNode","data","createComment","createElementNS","toLowerCase","createElement","attributes","Object","entries","forEach","ref","setAttribute","key","value","childNodes","childNode","appendChild","valueDiffing","checked","selected","getFromRoute","route","slice","length","const","c","splice","applyDiff","tree","diff","newNode","reference","_const","info","preDiffApply","action","addAttribute","name","modifyAttribute","newValue","removeAttribute","modifyTextElement","nodeType","textDiff","oldValue","modifyValue","modifyComment","modifyChecked","modifySelected","replaceElement","parentNode","replaceChild","namespaceURI","relocateGroup","Array","groupLength","map","removeChild","from","index","to","insertBefore","removeElement","addElement","element","removeTextElement","addTextElement","console","log","postDiffApply","swap","obj","p1","p2","tmp","undoDOM","diffs","reverse","undoDiff","Diff","this","elementDescriptors","el","output","push","replace","id","findUniqueDescriptors","li","uniqueDescriptors","duplicateDescriptors","descriptor","inUnique","uniqueInBoth","l1","l2","l1Unique","l2Unique","inBoth","keys","removeDone","outerDone","innerDone","valueDone","every","isEqual","e1","e2","Boolean","e1Attributes","e2Attributes","attribute","roughlyEqual","sameSiblings","preventRecursion","nodeList1","nodeList2","childUniqueDescriptors","cloneObj","JSON","parse","stringify","findCommonSubsets","c1","c2","marked1","marked2","lcsSize","c1Length","c2Length","matches","subsetsSame","some","i","c1Desc","c2Desc","description","c1Index","c1Element","c2Index","c2Element","makeArray","n","v","toString","setValue","aKey","aValue","DiffTracker","list","add","fn","the_counter","getFromVirtualRoute","nodeIndex","applyVirtual","routeInfo","newSubsets","preVirtualDiffApply","movedNode","subsets","splitLength","delete","mnewSubsets","filter","concat","postVirtualDiffApply","applyVirtualDiff","nodeToObj","aNode","prototype","call","undefined","type","includes","tagRE","empty","create","attrRE","unescape","string","lookup","area","base","br","col","embed","hr","img","input","keygen","link","menuItem","meta","param","source","track","wbr","parseTag","tag","res","tagMatch","match","toUpperCase","charAt","voidElement","startsWith","endIndex","indexOf","reg","RegExp","result","done","exec","trim","attr","arr","split","lastIndex","substring","stringToObj","cleanObj","child","html","components","current","level","inComponent","parent","isOpen","isComment","start","nextChar","comment","end","DiffFinder","t1Node","t2Node","t1","HTMLElement","t2","diffcount","foundAll","debug","t1Orig","t2Orig","tracker","init","findDiffs","diffcap","window","diffError","Error","findNextDiff","error","fdiffs","maxDepth","findOuterDiff","filterOuterDiff","findInnerDiff","findValueDiff","attr1","attr2","attrLength","pos","maxNodeDiffCount","Math","abs","sort","t1ChildNodes","t2ChildNodes","last","max","childNodesLengthDifference","maxChildCount","subtrees","subsetsAge","oldTree","newTree","oldChildren","newChildren","subset","returnIndex","arguments","item","markSubTrees","attemptGroupRelocation","destinationDifferent","toGroup","group","similarNode","testI","gapInformation","stable","gaps1","gaps2","endOld","endNew","j","getGapInformation","shortest","min","index2","index1","DEFAULT_OPTIONS","currentValue","expectedValue","compress","DiffDOM","hasOwnProperty","varNames","varName","apply","applyDOM","undo","TraceLogger","pad","padding","tick","messages","wrapkey","oldfn","fin","args","fout","format","s","t","stringCollapse","outerHTML","join","valueOf","terminator","_"],"mappings":"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"}