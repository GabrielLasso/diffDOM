{"version":3,"file":"diffDOM.js","sources":["../src/diffDOM/helpers.js","../src/diffDOM/dom/fromVirtual.js","../src/diffDOM/dom/apply.js","../src/diffDOM/dom/undo.js","../src/diffDOM/virtual/helpers.js","../src/diffDOM/virtual/apply.js","../src/diffDOM/virtual/fromDOM.js","../src/diffDOM/virtual/fromString.js","../src/diffDOM/virtual/diff.js","../src/diffDOM/index.js","../src/TraceLogger.js"],"sourcesContent":["export function unescape(string) {\n    return string.replace(/&lt;/g, '<').replace(/&gt;/g, '>')\n.replace(/&amp;/g, '&')\n}\n","import {unescape} from \"../helpers\"\n\nexport function objToNode(objNode, insideSvg, options) {\n    let node\n    if (objNode.nodeName === '#text') {\n        node = options.document.createTextNode(unescape(objNode.data))\n\n    } else if (objNode.nodeName === '#comment') {\n        node = options.document.createComment(unescape(objNode.data))\n    } else {\n        if (objNode.nodeName === 'svg' || insideSvg) {\n            node = options.document.createElementNS('http://www.w3.org/2000/svg', objNode.nodeName)\n            insideSvg = true\n        } else {\n            node = options.document.createElement(objNode.nodeName)\n        }\n        if (objNode.attributes) {\n            Object.entries(objNode.attributes).forEach(([key, value]) => node.setAttribute(key, value))\n        }\n        if (objNode.childNodes) {\n            objNode.childNodes.forEach(childNode => node.appendChild(objToNode(childNode, insideSvg, options)))\n        }\n        if (options.valueDiffing) {\n            if (objNode.value) {\n                node.value = objNode.value\n            }\n            if (objNode.checked) {\n                node.checked = objNode.checked\n            }\n            if (objNode.selected) {\n                node.selected = objNode.selected\n            }\n        }\n    }\n    return node\n}\n","import {objToNode} from \"./fromVirtual\"\n\n// ===== Apply a diff =====\n\nfunction getFromRoute(node, route) {\n    route = route.slice()\n    while (route.length > 0) {\n        if (!node.childNodes) {\n            return false\n        }\n        const c = route.splice(0, 1)[0]\n        node = node.childNodes[c]\n    }\n    return node\n}\n\nexport function applyDiff(\n        tree,\n        diff,\n        options // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\n    ) {\n    let node = getFromRoute(tree, diff[options._const.route])\n    let newNode\n    let reference\n    let route\n    let nodeArray\n    let c\n\n    // pre-diff hook\n    const info = {\n        diff,\n        node\n    }\n\n    if (options.preDiffApply(info)) {\n        return true\n    }\n\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            if (!node || !node.setAttribute) {\n                return false\n            }\n            node.setAttribute(diff[options._const.name], diff[options._const.value])\n            break\n        case options._const.modifyAttribute:\n            if (!node || !node.setAttribute) {\n                return false\n            }\n            node.setAttribute(diff[options._const.name], diff[options._const.newValue])\n            if (node.nodeName === 'INPUT' && diff[options._const.name] === 'value') {\n                node.value = diff[options._const.newValue]\n            }\n            break\n        case options._const.removeAttribute:\n            if (!node || !node.removeAttribute) {\n                return false\n            }\n            node.removeAttribute(diff[options._const.name])\n            break\n        case options._const.modifyTextElement:\n            if (!node || node.nodeType !== 3) {\n                return false\n            }\n            options.textDiff(node, node.data, diff[options._const.oldValue], diff[options._const.newValue])\n            break\n        case options._const.modifyValue:\n            if (!node || typeof node.value === 'undefined') {\n                return false\n            }\n            node.value = diff[options._const.newValue]\n            break\n        case options._const.modifyComment:\n            if (!node || typeof node.data === 'undefined') {\n                return false\n            }\n            options.textDiff(node, node.data, diff[options._const.oldValue], diff[options._const.newValue])\n            break\n        case options._const.modifyChecked:\n            if (!node || typeof node.checked === 'undefined') {\n                return false\n            }\n            node.checked = diff[options._const.newValue]\n            break\n        case options._const.modifySelected:\n            if (!node || typeof node.selected === 'undefined') {\n                return false\n            }\n            node.selected = diff[options._const.newValue]\n            break\n        case options._const.replaceElement:\n            node.parentNode.replaceChild(\n                objToNode(\n                    diff[options._const.newValue],\n                    node.namespaceURI === 'http://www.w3.org/2000/svg',\n                    options\n                ),\n                node\n            )\n            break\n        case options._const.relocateGroup:\n            nodeArray = Array(...new Array(diff.groupLength)).map(() => node.removeChild(node.childNodes[diff[options._const.from]]))\n            nodeArray.forEach((childNode, index) => {\n                if (index === 0) {\n                    reference = node.childNodes[diff[options._const.to]]\n                }\n                node.insertBefore(childNode, reference || null)\n            })\n            break\n        case options._const.removeElement:\n            node.parentNode.removeChild(node)\n            break\n        case options._const.addElement:\n            route = diff[options._const.route].slice()\n            c = route.splice(route.length - 1, 1)[0]\n            node = getFromRoute(tree, route)\n            node.insertBefore(\n                objToNode(\n                    diff[options._const.element],\n                    node.namespaceURI === 'http://www.w3.org/2000/svg',\n                    options\n                ),\n                node.childNodes[c] || null\n            )\n            break\n        case options._const.removeTextElement:\n            if (!node || node.nodeType !== 3) {\n                return false\n            }\n            node.parentNode.removeChild(node)\n            break\n        case options._const.addTextElement:\n            route = diff[options._const.route].slice()\n            c = route.splice(route.length - 1, 1)[0]\n            newNode = options.document.createTextNode(diff[options._const.value])\n            node = getFromRoute(tree, route)\n            if (!node || !node.childNodes) {\n                return false\n            }\n            node.insertBefore(newNode, node.childNodes[c] || null)\n            break\n        default:\n            console.log('unknown action')\n    }\n\n    // if a new node was created, we might be interested in its\n    // post diff hook\n    info.newNode = newNode\n    options.postDiffApply(info)\n\n    return true\n}\n\nexport function applyDOM(tree, diffs, options) {\n    return diffs.every(diff => applyDiff(tree, diff, options))\n}\n","import {applyDiff} from \"./apply\"\n\n// ===== Undo a diff =====\n\nfunction swap(obj, p1, p2) {\n    const tmp = obj[p1]\n    obj[p1] = obj[p2]\n    obj[p2] = tmp\n}\n\nfunction undoDiff(\n    tree,\n    diff,\n    options // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\n) {\n\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            diff[options._const.action] = options._const.removeAttribute\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyAttribute:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeAttribute:\n            diff[options._const.action] = options._const.addAttribute\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyTextElement:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyValue:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyComment:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyChecked:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifySelected:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.replaceElement:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.relocateGroup:\n            swap(diff, options._const.from, options._const.to)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeElement:\n            diff[options._const.action] = options._const.addElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.addElement:\n            diff[options._const.action] = options._const.removeElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeTextElement:\n            diff[options._const.action] = options._const.addTextElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.addTextElement:\n            diff[options._const.action] = options._const.removeTextElement\n            applyDiff(tree, diff, options)\n            break\n        default:\n            console.log('unknown action')\n    }\n\n}\n\nexport function undoDOM(tree, diffs, options) {\n    if (!diffs.length) {\n        diffs = [diffs]\n    }\n    diffs = diffs.slice()\n    diffs.reverse()\n    diffs.forEach(diff => {\n        undoDiff(tree, diff, options)\n    })\n}\n","export class Diff {\n    constructor(options = {}) {\n        Object.entries(options).forEach(([key, value]) => this[key] = value)\n    }\n\n    toString() {\n        return JSON.stringify(this)\n    }\n\n    setValue(aKey, aValue) {\n        this[aKey] = aValue\n        return this\n    }\n}\n\nfunction elementDescriptors(el) {\n    const output = []\n    if (el.nodeName !== '#text' && el.nodeName !== '#comment') {\n        output.push(el.nodeName)\n        if (el.attributes) {\n            if (el.attributes['class']) {\n                output.push(`${el.nodeName}.${el.attributes['class'].replace(/ /g, '.')}`)\n            }\n            if (el.attributes.id) {\n                output.push(`${el.nodeName}#${el.attributes.id}`)\n            }\n        }\n\n    }\n    return output\n}\n\nfunction findUniqueDescriptors(li) {\n    const uniqueDescriptors = {}\n    const duplicateDescriptors = {}\n\n    li.forEach(node => {\n        elementDescriptors(node).forEach(descriptor => {\n            const inUnique = descriptor in uniqueDescriptors\n            const inDupes = descriptor in duplicateDescriptors\n            if (!inUnique && !inDupes) {\n                uniqueDescriptors[descriptor] = true\n            } else if (inUnique) {\n                delete uniqueDescriptors[descriptor]\n                duplicateDescriptors[descriptor] = true\n            }\n        })\n    })\n\n    return uniqueDescriptors\n}\n\nfunction uniqueInBoth(l1, l2) {\n    const l1Unique = findUniqueDescriptors(l1)\n    const l2Unique = findUniqueDescriptors(l2)\n    const inBoth = {}\n\n    Object.keys(l1Unique).forEach(key => {\n        if (l2Unique[key]) {\n            inBoth[key] = true\n        }\n    })\n\n    return inBoth\n}\n\nexport function removeDone(tree) {\n    delete tree.outerDone\n    delete tree.innerDone\n    delete tree.valueDone\n    if (tree.childNodes) {\n        return tree.childNodes.every(removeDone)\n    } else {\n        return true\n    }\n}\n\nexport function isEqual(e1, e2) {\n    if (!['nodeName', 'value', 'checked', 'selected', 'data'].every(element => {\n            if (e1[element] !== e2[element]) {\n                return false\n            }\n            return true\n        })) {\n        return false\n    }\n\n    if (Boolean(e1.attributes) !== Boolean(e2.attributes)) {\n        return false\n    }\n\n    if (Boolean(e1.childNodes) !== Boolean(e2.childNodes)) {\n        return false\n    }\n    if (e1.attributes) {\n        const e1Attributes = Object.keys(e1.attributes)\n        const e2Attributes = Object.keys(e2.attributes)\n\n        if (e1Attributes.length !== e2Attributes.length) {\n            return false\n        }\n        if (!e1Attributes.every(attribute => {\n                if (e1.attributes[attribute] !== e2.attributes[attribute]) {\n                    return false\n                }\n                return true\n            })) {\n            return false\n        }\n    }\n    if (e1.childNodes) {\n        if (e1.childNodes.length !== e2.childNodes.length) {\n            return false\n        }\n        if (!e1.childNodes.every((childNode, index) => isEqual(childNode, e2.childNodes[index]))) {\n\n            return false\n        }\n\n    }\n\n    return true\n}\n\n\nexport function roughlyEqual(e1, e2, uniqueDescriptors, sameSiblings, preventRecursion) {\n\n    if (!e1 || !e2) {\n        return false\n    }\n\n    if (e1.nodeName !== e2.nodeName) {\n        return false\n    }\n\n    if (e1.nodeName === '#text') {\n        // Note that we initially don't care what the text content of a node is,\n        // the mere fact that it's the same tag and \"has text\" means it's roughly\n        // equal, and then we can find out the true text difference later.\n        return preventRecursion ? true : e1.data === e2.data\n    }\n\n\n    if (e1.nodeName in uniqueDescriptors) {\n        return true\n    }\n\n    if (e1.attributes && e2.attributes) {\n\n        if (e1.attributes.id) {\n            if (e1.attributes.id !== e2.attributes.id) {\n                return false\n            } else {\n                const idDescriptor = `${e1.nodeName}#${e1.attributes.id}`\n                if (idDescriptor in uniqueDescriptors) {\n                    return true\n                }\n            }\n        }\n        if (e1.attributes['class'] && e1.attributes['class'] === e2.attributes['class']) {\n            const classDescriptor = `${e1.nodeName}.${e1.attributes['class'].replace(/ /g, '.')}`\n            if (classDescriptor in uniqueDescriptors) {\n                return true\n            }\n        }\n    }\n\n    if (sameSiblings) {\n        return true\n    }\n\n    const nodeList1 = e1.childNodes ? e1.childNodes.slice().reverse() : []\n    const nodeList2 = e2.childNodes ? e2.childNodes.slice().reverse() : []\n\n    if (nodeList1.length !== nodeList2.length) {\n        return false\n    }\n\n    if (preventRecursion) {\n        return nodeList1.every((element, index) => element.nodeName === nodeList2[index].nodeName)\n    } else {\n        // note: we only allow one level of recursion at any depth. If 'preventRecursion'\n        // was not set, we must explicitly force it to true for child iterations.\n        const childUniqueDescriptors = uniqueInBoth(nodeList1, nodeList2)\n        return nodeList1.every((element, index) => roughlyEqual(element, nodeList2[index], childUniqueDescriptors, true, true))\n    }\n}\n\n\nexport function cloneObj(obj) { //  TODO: Do we really need to clone here? Is it not enough to just return the original object?\n    return JSON.parse(JSON.stringify(obj))\n}\n/**\n * based on https://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Longest_common_substring#JavaScript\n */\nfunction findCommonSubsets(c1, c2, marked1, marked2) {\n    let lcsSize = 0\n    let index = []\n    const c1Length = c1.length\n    const c2Length = c2.length\n\n    const // set up the matching table\n        matches = Array(...new Array(c1Length + 1)).map(() => [])\n\n    const uniqueDescriptors = uniqueInBoth(c1, c2)\n\n    let // If all of the elements are the same tag, id and class, then we can\n        // consider them roughly the same even if they have a different number of\n        // children. This will reduce removing and re-adding similar elements.\n        subsetsSame = c1Length === c2Length\n\n    if (subsetsSame) {\n\n        c1.some((element, i) => {\n            const c1Desc = elementDescriptors(element)\n            const c2Desc = elementDescriptors(c2[i])\n            if (c1Desc.length !== c2Desc.length) {\n                subsetsSame = false\n                return true\n            }\n            c1Desc.some((description, i) => {\n                if (description !== c2Desc[i]) {\n                    subsetsSame = false\n                    return true\n                }\n            })\n            if (!subsetsSame) {\n                return true\n            }\n        })\n    }\n\n    // fill the matches with distance values\n    for (let c1Index = 0; c1Index < c1Length; c1Index++) {\n        const c1Element = c1[c1Index]\n        for (let c2Index = 0; c2Index < c2Length; c2Index++) {\n            const c2Element = c2[c2Index]\n            if (!marked1[c1Index] && !marked2[c2Index] && roughlyEqual(c1Element, c2Element, uniqueDescriptors, subsetsSame)) {\n                matches[c1Index + 1][c2Index + 1] = (matches[c1Index][c2Index] ? matches[c1Index][c2Index] + 1 : 1)\n                if (matches[c1Index + 1][c2Index + 1] >= lcsSize) {\n                    lcsSize = matches[c1Index + 1][c2Index + 1]\n                    index = [c1Index + 1, c2Index + 1]\n                }\n            } else {\n                matches[c1Index + 1][c2Index + 1] = 0\n            }\n        }\n    }\n\n    if (lcsSize === 0) {\n        return false\n    }\n\n    return {\n        oldValue: index[0] - lcsSize,\n        newValue: index[1] - lcsSize,\n        length: lcsSize\n    }\n}\n\n/**\n * This should really be a predefined function in Array...\n */\nfunction makeArray(n, v) {\n    return Array(...new Array(n)).map(() => v)\n}\n\n/**\n * Generate arrays that indicate which node belongs to which subset,\n * or whether it's actually an orphan node, existing in only one\n * of the two trees, rather than somewhere in both.\n *\n * So if t1 = <img><canvas><br>, t2 = <canvas><br><img>.\n * The longest subset is \"<canvas><br>\" (length 2), so it will group 0.\n * The second longest is \"<img>\" (length 1), so it will be group 1.\n * gaps1 will therefore be [1,0,0] and gaps2 [0,0,1].\n *\n * If an element is not part of any group, it will stay being 'true', which\n * is the initial value. For example:\n * t1 = <img><p></p><br><canvas>, t2 = <b></b><br><canvas><img>\n *\n * The \"<p></p>\" and \"<b></b>\" do only show up in one of the two and will\n * therefore be marked by \"true\". The remaining parts are parts of the\n * groups 0 and 1:\n * gaps1 = [1, true, 0, 0], gaps2 = [true, 0, 0, 1]\n *\n */\nexport function getGapInformation(t1, t2, stable) {\n    const gaps1 = t1.childNodes ? makeArray(t1.childNodes.length, true) : []\n    const gaps2 = t2.childNodes ? makeArray(t2.childNodes.length, true) : []\n    let group = 0\n\n    // give elements from the same subset the same group number\n    stable.forEach(subset => {\n        const endOld = subset.oldValue + subset.length\n        const endNew = subset.newValue + subset.length\n\n        for (let j = subset.oldValue; j < endOld; j += 1) {\n            gaps1[j] = group\n        }\n        for (let j = subset.newValue; j < endNew; j += 1) {\n            gaps2[j] = group\n        }\n        group += 1\n    })\n\n    return {\n        gaps1,\n        gaps2\n    }\n}\n\n/**\n * Find all matching subsets, based on immediate child differences only.\n */\nexport function markSubTrees(oldTree, newTree) {\n    // note: the child lists are views, and so update as we update old/newTree\n    const oldChildren = oldTree.childNodes ? oldTree.childNodes : []\n\n    const newChildren = newTree.childNodes ? newTree.childNodes : []\n    const marked1 = makeArray(oldChildren.length, false)\n    const marked2 = makeArray(newChildren.length, false)\n    const subsets = []\n    let subset = true\n\n    const returnIndex = function() {\n        return arguments[1]\n    }\n\n    const markBoth = i => {\n        marked1[subset.oldValue + i] = true\n        marked2[subset.newValue + i] = true\n    }\n\n    while (subset) {\n        subset = findCommonSubsets(oldChildren, newChildren, marked1, marked2)\n        if (subset) {\n            subsets.push(subset)\n            const subsetArray = Array(...new Array(subset.length)).map(returnIndex)\n            subsetArray.forEach(item => markBoth(item))\n        }\n    }\n\n    oldTree.subsets = subsets\n    oldTree.subsetsAge = 100\n    return subsets\n}\n\nexport class DiffTracker {\n    constructor() {\n        this.list = []\n    }\n\n    add(diffs) {\n        this.list.push(...diffs)\n    }\n    forEach(fn) {\n        this.list.forEach(li => fn(li))\n    }\n\n}\n","import {cloneObj} from \"./helpers\"\n\n// ===== Apply a virtual diff =====\n\nfunction getFromVirtualRoute(tree, route) {\n    let node = tree\n    let parentNode\n    let nodeIndex\n\n    route = route.slice()\n    while (route.length > 0) {\n        if (!node.childNodes) {\n            return false\n        }\n        nodeIndex = route.splice(0, 1)[0]\n        parentNode = node\n        node = node.childNodes[nodeIndex]\n    }\n    return {\n        node,\n        parentNode,\n        nodeIndex\n    }\n}\n\nfunction applyVirtualDiff(\n        tree,\n        diff,\n        options // {preDiffApply, postDiffApply, _const}\n    ) {\n    const routeInfo = getFromVirtualRoute(tree, diff[options._const.route])\n    let node = routeInfo.node\n    const parentNode = routeInfo.parentNode\n    const nodeIndex = routeInfo.nodeIndex\n    const newSubsets = []\n\n    // pre-diff hook\n    const info = {\n        diff,\n        node\n    }\n\n    if (options.preDiffApply(info)) {\n        return true\n    }\n\n    let newNode\n    let nodeArray\n    let route\n    let c\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            if (!node.attributes) {\n                node.attributes = {}\n            }\n\n            node.attributes[diff[options._const.name]] = diff[options._const.value]\n\n            if (diff[options._const.name] === 'checked') {\n                node.checked = true\n            } else if (diff[options._const.name] === 'selected') {\n                node.selected = true\n            } else if (node.nodeName === 'INPUT' && diff[options._const.name] === 'value') {\n                node.value = diff[options._const.value]\n            }\n\n            break\n        case options._const.modifyAttribute:\n            node.attributes[diff[options._const.name]] = diff[options._const.newValue]\n            break\n        case options._const.removeAttribute:\n\n            delete node.attributes[diff[options._const.name]]\n\n            if (Object.keys(node.attributes).length === 0) {\n                delete node.attributes\n            }\n\n            if (diff[options._const.name] === 'checked') {\n                node.checked = false\n            } else if (diff[options._const.name] === 'selected') {\n                delete node.selected\n            } else if (node.nodeName === 'INPUT' && diff[options._const.name] === 'value') {\n                delete node.value\n            }\n\n            break\n        case options._const.modifyTextElement:\n            node.data = diff[options._const.newValue]\n            break\n        case options._const.modifyValue:\n            node.value = diff[options._const.newValue]\n            break\n        case options._const.modifyComment:\n            node.data = diff[options._const.newValue]\n            break\n        case options._const.modifyChecked:\n            node.checked = diff[options._const.newValue]\n            break\n        case options._const.modifySelected:\n            node.selected = diff[options._const.newValue]\n            break\n        case options._const.replaceElement:\n            newNode = cloneObj(diff[options._const.newValue])\n            newNode.outerDone = true\n            newNode.innerDone = true\n            newNode.valueDone = true\n            parentNode.childNodes[nodeIndex] = newNode\n            break\n        case options._const.relocateGroup:\n            nodeArray = node.childNodes.splice(diff[options._const.from], diff.groupLength).reverse()\n            nodeArray.forEach(movedNode => node.childNodes.splice(diff[options._const.to], 0, movedNode))\n            if (node.subsets) {\n                node.subsets.forEach(map => {\n                    if (diff[options._const.from] < diff[options._const.to] && map.oldValue <= diff[options._const.to] && map.oldValue > diff[options._const.from]) {\n                        map.oldValue -= diff.groupLength\n                        const splitLength = map.oldValue + map.length - diff[options._const.to]\n                        if (splitLength > 0) {\n                            // new insertion splits map.\n                            newSubsets.push({\n                                oldValue: diff[options._const.to] + diff.groupLength,\n                                newValue: map.newValue + map.length - splitLength,\n                                length: splitLength\n                            })\n                            map.length -= splitLength\n                        }\n                    } else if (diff[options._const.from] > diff[options._const.to] && map.oldValue > diff[options._const.to] && map.oldValue < diff[options._const.from]) {\n                        map.oldValue += diff.groupLength\n                        const splitLength = map.oldValue + map.length - diff[options._const.to]\n                        if (splitLength > 0) {\n                            // new insertion splits map.\n                            newSubsets.push({\n                                oldValue: diff[options._const.to] + diff.groupLength,\n                                newValue: map.newValue + map.length - splitLength,\n                                length: splitLength\n                            })\n                            map.length -= splitLength\n                        }\n                    } else if (map.oldValue === diff[options._const.from]) {\n                        map.oldValue = diff[options._const.to]\n                    }\n                })\n            }\n\n            break\n        case options._const.removeElement:\n            parentNode.childNodes.splice(nodeIndex, 1)\n            if (parentNode.subsets) {\n                parentNode.subsets.forEach(map => {\n                    if (map.oldValue > nodeIndex) {\n                        map.oldValue -= 1\n                    } else if (map.oldValue === nodeIndex) {\n                        map.delete = true\n                    } else if (map.oldValue < nodeIndex && (map.oldValue + map.length) > nodeIndex) {\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\n                            map.length--\n                        } else {\n                            newSubsets.push({\n                                newValue: map.newValue + nodeIndex - map.oldValue,\n                                oldValue: nodeIndex,\n                                length: map.length - nodeIndex + map.oldValue - 1\n                            })\n                            map.length = nodeIndex - map.oldValue\n                        }\n                    }\n                })\n            }\n            node = parentNode\n            break\n        case options._const.addElement:\n            route = diff[options._const.route].slice()\n            c = route.splice(route.length - 1, 1)[0]\n            node = getFromVirtualRoute(tree, route).node\n            newNode = cloneObj(diff[options._const.element])\n            newNode.outerDone = true\n            newNode.innerDone = true\n            newNode.valueDone = true\n\n            if (!node.childNodes) {\n                node.childNodes = []\n            }\n\n            if (c >= node.childNodes.length) {\n                node.childNodes.push(newNode)\n            } else {\n                node.childNodes.splice(c, 0, newNode)\n            }\n            if (node.subsets) {\n                node.subsets.forEach(map => {\n                    if (map.oldValue >= c) {\n                        map.oldValue += 1\n                    } else if (map.oldValue < c && (map.oldValue + map.length) > c) {\n                        const splitLength = map.oldValue + map.length - c\n                        newSubsets.push({\n                            newValue: map.newValue + map.length - splitLength,\n                            oldValue: c + 1,\n                            length: splitLength\n                        })\n                        map.length -= splitLength\n                    }\n                })\n            }\n            break\n        case options._const.removeTextElement:\n            parentNode.childNodes.splice(nodeIndex, 1)\n            if (parentNode.nodeName === 'TEXTAREA') {\n                delete parentNode.value\n            }\n            if (parentNode.subsets) {\n                parentNode.subsets.forEach(map => {\n                    if (map.oldValue > nodeIndex) {\n                        map.oldValue -= 1\n                    } else if (map.oldValue === nodeIndex) {\n                        map.delete = true\n                    } else if (map.oldValue < nodeIndex && (map.oldValue + map.length) > nodeIndex) {\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\n                            map.length--\n                        } else {\n                            newSubsets.push({\n                                newValue: map.newValue + nodeIndex - map.oldValue,\n                                oldValue: nodeIndex,\n                                length: map.length - nodeIndex + map.oldValue - 1\n                            })\n                            map.length = nodeIndex - map.oldValue\n                        }\n                    }\n                })\n            }\n            node = parentNode\n            break\n        case options._const.addTextElement:\n            route = diff[options._const.route].slice()\n            c = route.splice(route.length - 1, 1)[0]\n            newNode = {}\n            newNode.nodeName = '#text'\n            newNode.data = diff[options._const.value]\n            node = getFromVirtualRoute(tree, route).node\n            if (!node.childNodes) {\n                node.childNodes = []\n            }\n\n            if (c >= node.childNodes.length) {\n                node.childNodes.push(newNode)\n            } else {\n                node.childNodes.splice(c, 0, newNode)\n            }\n            if (node.nodeName === 'TEXTAREA') {\n                node.value = diff[options._const.newValue]\n            }\n            if (node.subsets) {\n                node.subsets.forEach(map => {\n                    if (map.oldValue >= c) {\n                        map.oldValue += 1\n                    }\n                    if (map.oldValue < c && (map.oldValue + map.length) > c) {\n                        const splitLength = map.oldValue + map.length - c\n                        newSubsets.push({\n                            newValue: map.newValue + map.length - splitLength,\n                            oldValue: c + 1,\n                            length: splitLength\n                        })\n                        map.length -= splitLength\n                    }\n                })\n            }\n            break\n        default:\n            console.log('unknown action')\n    }\n\n    if (node.subsets) {\n        node.subsets = node.subsets.filter(map => !map.delete && map.oldValue !== map.newValue)\n        if (newSubsets.length) {\n            node.subsets = node.subsets.concat(newSubsets)\n        }\n    }\n\n    // capture newNode for the callback\n    info.newNode = newNode\n    options.postDiffApply(info)\n\n    return\n}\n\nexport function applyVirtual(tree, diffs, options) {\n    diffs.forEach(diff => {\n        applyVirtualDiff(tree, diff, options)\n    })\n    return true\n}\n","export function nodeToObj(aNode, options = {}) {\n    const objNode = {}\n    objNode.nodeName = aNode.nodeName\n    if (objNode.nodeName === '#text' || objNode.nodeName === '#comment') {\n        objNode.data = aNode.data\n    } else {\n        if (aNode.attributes && aNode.attributes.length > 0) {\n            objNode.attributes = {}\n            const nodeArray = Array.prototype.slice.call(aNode.attributes)\n            nodeArray.forEach(attribute => objNode.attributes[attribute.name] = attribute.value)\n        }\n        if (objNode.nodeName === 'TEXTAREA') {\n            objNode.value = aNode.value\n        } else if (aNode.childNodes && aNode.childNodes.length > 0) {\n            objNode.childNodes = []\n            const nodeArray = Array.prototype.slice.call(aNode.childNodes)\n            nodeArray.forEach(childNode => objNode.childNodes.push(nodeToObj(childNode, options)))\n        }\n        if (options.valueDiffing) {\n            if (aNode.checked !== undefined && aNode.type && ['radio', 'checkbox'].includes(aNode.type.toLowerCase())) {\n                objNode.checked = aNode.checked\n            } else if (aNode.value !== undefined) {\n                objNode.value = aNode.value\n            }\n            if (aNode.selected !== undefined) {\n                objNode.selected = aNode.selected\n            }\n        }\n    }\n    return objNode\n}\n","// from html-parse-stringify (MIT)\n\nconst tagRE = /<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>/g\n// re-used obj for quick lookups of components\nconst empty = Object.create ? Object.create(null) : {}\nconst attrRE = /\\s([^'\"/\\s><]+?)[\\s/>]|([^\\s=]+)=\\s?(\".*?\"|'.*?')/g\n\n// create optimized lookup object for\n// void elements as listed here:\n// http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\nconst lookup = {\n    area: true,\n    base: true,\n    br: true,\n    col: true,\n    embed: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    menuItem: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true\n}\n\n\nfunction parseTag(tag) {\n    const res = {\n        nodeName: '',\n        attributes: {}\n    }\n\n    let tagMatch = tag.match(/<\\/?([^\\s]+?)[/\\s>]/)\n    if (tagMatch) {\n        res.nodeName = tagMatch[1].toUpperCase()\n        if (lookup[tagMatch[1].toLowerCase()] || tag.charAt(tag.length - 2) === '/') res.voidElement = true\n\n    }\n\n    let reg = new RegExp(attrRE)\n    let result = null\n    let done = false\n    while (!done) {\n        result = reg.exec(tag)\n\n        if (result === null) {\n            done = true\n        } else if (result[0].trim()) {\n            if (result[1]) {\n                let attr = result[1].trim()\n                let arr = [attr, \"\"]\n\n                if (attr.indexOf(\"=\") > -1) arr = attr.split(\"=\")\n\n                res.attributes[arr[0]] = arr[1]\n                reg.lastIndex--\n            } else if (result[2]) res.attributes[result[2]] = result[3].trim().substring(1, result[3].length - 1)\n        }\n    }\n\n    return res\n}\n\nfunction parse(\n    html,\n    options = {components: empty}\n) {\n    const result = []\n    let current\n    let level = -1\n    const arr = []\n    const byTag = {}\n    let inComponent = false\n\n    html.replace(tagRE, (tag, index) => {\n        if (inComponent) {\n            if (tag !== (`</${current.nodeName}>`)) {\n                return\n            } else {\n                inComponent = false\n            }\n        }\n        const isOpen = tag.charAt(1) !== '/'\n        const start = index + tag.length\n        const nextChar = html.charAt(start)\n        let parent\n\n        if (isOpen) {\n            level++\n\n            current = parseTag(tag)\n            if (current.type === 'tag' && options.components[current.nodeName]) {\n                current.type = 'component'\n                inComponent = true\n            }\n\n            if (!current.voidElement && !inComponent && nextChar && nextChar !== '<') {\n                if (!current.childNodes) {\n                    current.childNodes = []\n                }\n                current.childNodes.push({\n                    nodeName: '#text',\n                    data: html.slice(start, html.indexOf('<', start))\n                })\n            }\n\n            byTag[current.tagName] = current\n\n            // if we're at root, push new base node\n            if (level === 0) {\n                result.push(current)\n            }\n\n            parent = arr[level - 1]\n\n            if (parent) {\n                if (!parent.childNodes) {\n                    parent.childNodes = []\n                }\n                parent.childNodes.push(current)\n            }\n\n            arr[level] = current\n        }\n\n        if (!isOpen || current.voidElement) {\n            level--\n            if (!inComponent && nextChar !== '<' && nextChar) {\n                // trailing text node\n                // if we're at the root, push a base text node. otherwise add as\n                // a child to the current node.\n                parent = level === -1 ? result : arr[level].childNodes || []\n\n                // calculate correct end of the data slice in case there's\n                // no tag after the text node.\n                const end = html.indexOf('<', start)\n                const data = html.slice(start, end === -1 ? undefined : end)\n                parent.push({\n                    nodeName: '#text',\n                    data\n                })\n            }\n        }\n    })\n\n    return result[0]\n}\n\nfunction cleanObj(obj) {\n    delete obj.voidElement\n    if (obj.childNodes) {\n        obj.childNodes.forEach(child => cleanObj(child))\n    }\n    return obj\n}\n\nexport function stringToObj(string) {\n    return cleanObj(parse(string))\n}\n","import {Diff, DiffTracker, cloneObj, getGapInformation, isEqual, markSubTrees, removeDone, roughlyEqual} from \"./helpers\"\nimport {applyVirtual} from \"./apply\"\nimport {nodeToObj} from \"./fromDOM\"\nimport {stringToObj} from \"./fromString\"\n\n// ===== Create a diff =====\n\nexport class DiffFinder {\n    constructor(t1Node, t2Node, options) {\n        this.options = options\n        this.t1 = (t1Node instanceof HTMLElement) ? nodeToObj(t1Node, this.options) : (typeof t1Node === 'string') ? stringToObj(t1Node, this.options) : JSON.parse(JSON.stringify(t1Node))\n        this.t2 = (t2Node instanceof HTMLElement) ? nodeToObj(t2Node, this.options) : (typeof t2Node === 'string') ? stringToObj(t2Node, this.options) : JSON.parse(JSON.stringify(t2Node))\n        this.diffcount = 0\n        this.foundAll = false\n        if (this.debug) {\n            this.t1Orig = nodeToObj(t1Node, this.options)\n            this.t2Orig = nodeToObj(t2Node, this.options)\n        }\n\n        this.tracker = new DiffTracker()\n    }\n\n    init() {\n        return this.findDiffs(this.t1, this.t2)\n    }\n\n    findDiffs(t1, t2) {\n        let diffs\n        do {\n            if (this.options.debug) {\n                this.diffcount += 1\n                if (this.diffcount > this.options.diffcap) {\n                    window.diffError = [this.t1Orig, this.t2Orig]\n                    throw new Error(`surpassed diffcap:${JSON.stringify(this.t1Orig)} -> ${JSON.stringify(this.t2Orig)}`)\n                }\n            }\n            diffs = this.findNextDiff(t1, t2, [])\n\n            if (diffs.length === 0) {\n                // Last check if the elements really are the same now.\n                // If not, remove all info about being done and start over.\n                // Sometimes a node can be marked as done, but the creation of subsequent diffs means that it has to be changed again.\n                if (!isEqual(t1, t2)) {\n                    if (this.foundAll) {\n                        console.error('Could not find remaining diffs!')\n                    } else {\n                        this.foundAll = true\n                        removeDone(t1)\n                        diffs = this.findNextDiff(t1, t2, [])\n                    }\n                }\n            }\n            if (diffs.length > 0) {\n                this.foundAll = false\n                this.tracker.add(diffs)\n                applyVirtual(t1, diffs, this.options)\n            }\n        } while (diffs.length > 0)\n\n        return this.tracker.list\n    }\n\n    findNextDiff(t1, t2, route) {\n        let diffs\n        let fdiffs\n\n        if (this.options.maxDepth && route.length > this.options.maxDepth) {\n            return []\n        }\n        // outer differences?\n        if (!t1.outerDone) {\n            diffs = this.findOuterDiff(t1, t2, route)\n            if (this.options.filterOuterDiff) {\n                fdiffs = this.options.filterOuterDiff(t1, t2, diffs)\n                if (fdiffs) diffs = fdiffs\n            }\n            if (diffs.length > 0) {\n                t1.outerDone = true\n                return diffs\n            } else {\n                t1.outerDone = true\n            }\n        }\n        // inner differences?\n        if (!t1.innerDone) {\n            diffs = this.findInnerDiff(t1, t2, route)\n            if (diffs.length > 0) {\n                return diffs\n            } else {\n                t1.innerDone = true\n            }\n        }\n\n        if (this.options.valueDiffing && !t1.valueDone) {\n            // value differences?\n            diffs = this.findValueDiff(t1, t2, route)\n\n            if (diffs.length > 0) {\n                t1.valueDone = true\n                return diffs\n            } else {\n                t1.valueDone = true\n            }\n        }\n\n        // no differences\n        return []\n    }\n\n    findOuterDiff(t1, t2, route) {\n        const diffs = []\n        let attr\n        let attr1\n        let attr2\n        let attrLength\n        let pos\n        let i\n        if (t1.nodeName !== t2.nodeName) {\n            if (!route.length) {\n                throw new Error('Top level nodes have to be of the same kind.')\n            }\n            return [new Diff()\n                .setValue(this.options._const.action, this.options._const.replaceElement)\n                .setValue(this.options._const.oldValue, cloneObj(t1))\n                .setValue(this.options._const.newValue, cloneObj(t2))\n                .setValue(this.options._const.route, route)\n            ]\n        }\n        if (route.length && this.options.maxNodeDiffCount < Math.abs((t1.childNodes || []).length - (t2.childNodes || []).length)) {\n            return [new Diff()\n                .setValue(this.options._const.action, this.options._const.replaceElement)\n                .setValue(this.options._const.oldValue, cloneObj(t1))\n                .setValue(this.options._const.newValue, cloneObj(t2))\n                .setValue(this.options._const.route, route)\n            ]\n        }\n\n        if (t1.data !== t2.data) {\n            // Comment or text node.\n            if (t1.nodeName === '#text') {\n                return [new Diff()\n                    .setValue(this.options._const.action, this.options._const.modifyTextElement)\n                    .setValue(this.options._const.route, route)\n                    .setValue(this.options._const.oldValue, t1.data)\n                    .setValue(this.options._const.newValue, t2.data)\n                ]\n            } else {\n                return [new Diff()\n                    .setValue(this.options._const.action, this.options._const.modifyComment)\n                    .setValue(this.options._const.route, route)\n                    .setValue(this.options._const.oldValue, t1.data)\n                    .setValue(this.options._const.newValue, t2.data)\n                ]\n            }\n\n        }\n\n        attr1 = t1.attributes ? Object.keys(t1.attributes).sort() : []\n        attr2 = t2.attributes ? Object.keys(t2.attributes).sort() : []\n\n        attrLength = attr1.length\n        for (i = 0; i < attrLength; i++) {\n            attr = attr1[i]\n            pos = attr2.indexOf(attr)\n            if (pos === -1) {\n                diffs.push(new Diff()\n                    .setValue(this.options._const.action, this.options._const.removeAttribute)\n                    .setValue(this.options._const.route, route)\n                    .setValue(this.options._const.name, attr)\n                    .setValue(this.options._const.value, t1.attributes[attr])\n                )\n            } else {\n                attr2.splice(pos, 1)\n                if (t1.attributes[attr] !== t2.attributes[attr]) {\n                    diffs.push(new Diff()\n                        .setValue(this.options._const.action, this.options._const.modifyAttribute)\n                        .setValue(this.options._const.route, route)\n                        .setValue(this.options._const.name, attr)\n                        .setValue(this.options._const.oldValue, t1.attributes[attr])\n                        .setValue(this.options._const.newValue, t2.attributes[attr])\n                    )\n                }\n            }\n        }\n\n        attrLength = attr2.length\n        for (i = 0; i < attrLength; i++) {\n            attr = attr2[i]\n            diffs.push(new Diff()\n                .setValue(this.options._const.action, this.options._const.addAttribute)\n                .setValue(this.options._const.route, route)\n                .setValue(this.options._const.name, attr)\n                .setValue(this.options._const.value, t2.attributes[attr])\n            )\n        }\n\n        return diffs\n    }\n\n    findInnerDiff(t1, t2, route) {\n        const t1ChildNodes = t1.childNodes ? t1.childNodes.slice() : []\n        const t2ChildNodes = t2.childNodes ? t2.childNodes.slice() : []\n        const last = Math.max(t1ChildNodes.length, t2ChildNodes.length)\n        let childNodesLengthDifference = Math.abs(t1ChildNodes.length - t2ChildNodes.length)\n        let diffs = []\n        let index = 0\n        if (!this.options.maxChildCount || last < this.options.maxChildCount) {\n            const subtrees = t1.subsets && t1.subsetsAge-- ? t1.subsets : (t1.childNodes && t2.childNodes) ? markSubTrees(t1, t2) : []\n\n            if (subtrees.length > 0) {\n                /* One or more groups have been identified among the childnodes of t1\n                 * and t2.\n                 */\n                diffs = this.attemptGroupRelocation(t1, t2, subtrees, route)\n                if (diffs.length > 0) {\n                    return diffs\n                }\n            }\n        }\n\n\n        /* 0 or 1 groups of similar child nodes have been found\n         * for t1 and t2. 1 If there is 1, it could be a sign that the\n         * contents are the same. When the number of groups is below 2,\n         * t1 and t2 are made to have the same length and each of the\n         * pairs of child nodes are diffed.\n         */\n\n        for (let i = 0; i < last; i += 1) {\n            const e1 = t1ChildNodes[i]\n            const e2 = t2ChildNodes[i]\n\n            if (childNodesLengthDifference) {\n                /* t1 and t2 have different amounts of childNodes. Add\n                 * and remove as necessary to obtain the same length */\n                if (e1 && !e2) {\n                    if (e1.nodeName === '#text') {\n                        diffs.push(new Diff()\n                            .setValue(this.options._const.action, this.options._const.removeTextElement)\n                            .setValue(this.options._const.route, route.concat(index))\n                            .setValue(this.options._const.value, e1.data)\n                        )\n                        index -= 1\n                    } else {\n                        diffs.push(new Diff()\n                            .setValue(this.options._const.action, this.options._const.removeElement)\n                            .setValue(this.options._const.route, route.concat(index))\n                            .setValue(this.options._const.element, cloneObj(e1))\n                        )\n                        index -= 1\n                    }\n\n                } else if (e2 && !e1) {\n                    if (e2.nodeName === '#text') {\n                        diffs.push(new Diff()\n                            .setValue(this.options._const.action, this.options._const.addTextElement)\n                            .setValue(this.options._const.route, route.concat(index))\n                            .setValue(this.options._const.value, e2.data)\n                        )\n                    } else {\n                        diffs.push(new Diff()\n                            .setValue(this.options._const.action, this.options._const.addElement)\n                            .setValue(this.options._const.route, route.concat(index))\n                            .setValue(this.options._const.element, cloneObj(e2))\n                        )\n                    }\n                }\n            }\n            /* We are now guaranteed that childNodes e1 and e2 exist,\n             * and that they can be diffed.\n             */\n            /* Diffs in child nodes should not affect the parent node,\n             * so we let these diffs be submitted together with other\n             * diffs.\n             */\n\n            if (e1 && e2) {\n                if (!this.options.maxChildCount || last < this.options.maxChildCount) {\n                    diffs = diffs.concat(this.findNextDiff(e1, e2, route.concat(index)))\n                } else if (!isEqual(e1, e2)) {\n                    if (t1ChildNodes.length > t2ChildNodes.length) {\n                        diffs = diffs.concat([\n                            new Diff()\n                                .setValue(this.options._const.action, this.options._const.removeElement)\n                                .setValue(this.options._const.element, cloneObj(e1))\n                                .setValue(this.options._const.route, route.concat(index))\n                        ])\n                        t1ChildNodes.splice(i, 1)\n                        index -= 1\n                        childNodesLengthDifference -= 1\n                    } else if (t1ChildNodes.length < t2ChildNodes.length) {\n                        diffs = diffs.concat([\n                            new Diff()\n                                .setValue(this.options._const.action, this.options._const.addElement)\n                                .setValue(this.options._const.element, cloneObj(e2))\n                                .setValue(this.options._const.route, route.concat(index))\n                        ])\n                        t1ChildNodes.splice(i, 0, {})\n                        childNodesLengthDifference -= 1\n                    } else {\n                        diffs = diffs.concat([\n                            new Diff()\n                                .setValue(this.options._const.action, this.options._const.replaceElement)\n                                .setValue(this.options._const.oldValue, cloneObj(e1))\n                                .setValue(this.options._const.newValue, cloneObj(e2))\n                                .setValue(this.options._const.route, route.concat(index))\n                        ])\n                    }\n\n                }\n\n            }\n            index += 1\n\n        }\n        t1.innerDone = true\n        return diffs\n    }\n\n    attemptGroupRelocation(t1, t2, subtrees, route) {\n        /* Either t1.childNodes and t2.childNodes have the same length, or\n         * there are at least two groups of similar elements can be found.\n         * attempts are made at equalizing t1 with t2. First all initial\n         * elements with no group affiliation (gaps=true) are removed (if\n         * only in t1) or added (if only in t2). Then the creation of a group\n         * relocation diff is attempted.\n         */\n        const gapInformation = getGapInformation(t1, t2, subtrees)\n        const gaps1 = gapInformation.gaps1\n        const gaps2 = gapInformation.gaps2\n        let shortest = Math.min(gaps1.length, gaps2.length)\n        let destinationDifferent\n        let toGroup\n        let group\n        let node\n        let similarNode\n        let testI\n        const diffs = []\n\n\n        for (let index2 = 0, index1 = 0; index2 < shortest; index1 += 1, index2 += 1) {\n            if (gaps1[index2] === true) {\n                node = t1.childNodes[index1]\n                if (node.nodeName === '#text') {\n                    if (t2.childNodes[index2].nodeName === '#text' && node.data !== t2.childNodes[index2].data) {\n                        testI = index1\n                        while (t1.childNodes.length > testI + 1 && t1.childNodes[testI + 1].nodeName === '#text') {\n                            testI += 1\n                            if (t2.childNodes[index2].data === t1.childNodes[testI].data) {\n                                similarNode = true\n                                break\n                            }\n                        }\n                        if (!similarNode) {\n                            diffs.push(new Diff()\n                                .setValue(this.options._const.action, this.options._const.modifyTextElement)\n                                .setValue(this.options._const.route, route.concat(index2))\n                                .setValue(this.options._const.oldValue, node.data)\n                                .setValue(this.options._const.newValue, t2.childNodes[index2].data)\n                            )\n                            return diffs\n                        }\n                    }\n                    diffs.push(new Diff()\n                        .setValue(this.options._const.action, this.options._const.removeTextElement)\n                        .setValue(this.options._const.route, route.concat(index2))\n                        .setValue(this.options._const.value, node.data)\n                    )\n                    gaps1.splice(index2, 1)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index2 -= 1\n                } else {\n                    diffs.push(new Diff()\n                        .setValue(this.options._const.action, this.options._const.removeElement)\n                        .setValue(this.options._const.route, route.concat(index2))\n                        .setValue(this.options._const.element, cloneObj(node))\n                    )\n                    gaps1.splice(index2, 1)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index2 -= 1\n                }\n\n            } else if (gaps2[index2] === true) {\n                node = t2.childNodes[index2]\n                if (node.nodeName === '#text') {\n                    diffs.push(new Diff()\n                        .setValue(this.options._const.action, this.options._const.addTextElement)\n                        .setValue(this.options._const.route, route.concat(index2))\n                        .setValue(this.options._const.value, node.data)\n                    )\n                    gaps1.splice(index2, 0, true)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index1 -= 1\n                } else {\n                    diffs.push(new Diff()\n                        .setValue(this.options._const.action, this.options._const.addElement)\n                        .setValue(this.options._const.route, route.concat(index2))\n                        .setValue(this.options._const.element, cloneObj(node))\n                    )\n                    gaps1.splice(index2, 0, true)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index1 -= 1\n                }\n\n            } else if (gaps1[index2] !== gaps2[index2]) {\n                if (diffs.length > 0) {\n                    return diffs\n                }\n                // group relocation\n                group = subtrees[gaps1[index2]]\n                toGroup = Math.min(group.newValue, (t1.childNodes.length - group.length))\n                if (toGroup !== group.oldValue) {\n                    // Check whether destination nodes are different than originating ones.\n                    destinationDifferent = false\n                    for (let j = 0; j < group.length; j += 1) {\n                        if (!roughlyEqual(t1.childNodes[toGroup + j], t1.childNodes[group.oldValue + j], [], false, true)) {\n                            destinationDifferent = true\n                        }\n                    }\n                    if (destinationDifferent) {\n                        return [new Diff()\n                            .setValue(this.options._const.action, this.options._const.relocateGroup)\n                            .setValue('groupLength', group.length)\n                            .setValue(this.options._const.from, group.oldValue)\n                            .setValue(this.options._const.to, toGroup)\n                            .setValue(this.options._const.route, route)\n                        ]\n                    }\n                }\n            }\n        }\n        return diffs\n    }\n\n    findValueDiff(t1, t2, route) {\n        // Differences of value. Only useful if the value/selection/checked value\n        // differs from what is represented in the DOM. For example in the case\n        // of filled out forms, etc.\n        const diffs = []\n\n        if (t1.selected !== t2.selected) {\n            diffs.push(new Diff()\n                .setValue(this.options._const.action, this.options._const.modifySelected)\n                .setValue(this.options._const.oldValue, t1.selected)\n                .setValue(this.options._const.newValue, t2.selected)\n                .setValue(this.options._const.route, route)\n            )\n        }\n\n        if ((t1.value || t2.value) && t1.value !== t2.value && t1.nodeName !== 'OPTION') {\n            diffs.push(new Diff()\n                .setValue(this.options._const.action, this.options._const.modifyValue)\n                .setValue(this.options._const.oldValue, t1.value || \"\")\n                .setValue(this.options._const.newValue, t2.value || \"\")\n                .setValue(this.options._const.route, route)\n            )\n        }\n        if (t1.checked !== t2.checked) {\n            diffs.push(new Diff()\n                .setValue(this.options._const.action, this.options._const.modifyChecked)\n                .setValue(this.options._const.oldValue, t1.checked)\n                .setValue(this.options._const.newValue, t2.checked)\n                .setValue(this.options._const.route, route)\n            )\n        }\n\n        return diffs\n    }\n\n}\n","import {applyDOM, undoDOM} from \"./dom/index\"\nimport {DiffFinder} from \"./virtual/index\"\nimport {unescape} from \"./helpers\"\nexport {nodeToObj, stringToObj} from \"./virtual/index\"\n\nconst DEFAULT_OPTIONS = {\n    debug: false,\n    diffcap: 10, // Limit for how many diffs are accepting when debugging. Inactive when debug is false.\n    maxDepth: false, // False or a numeral. If set to a numeral, limits the level of depth that the the diff mechanism looks for differences. If false, goes through the entire tree.\n    maxChildCount: 50, // False or a numeral. If set to a numeral, only does a simplified form of diffing of contents so that the number of diffs cannot be higher than the number of child nodes.\n    valueDiffing: true, // Whether to take into consideration the values of forms that differ from auto assigned values (when a user fills out a form).\n    // syntax: textDiff: function (node, currentValue, expectedValue, newValue)\n    textDiff(node, currentValue, expectedValue, newValue) {\n        node.data = unescape(newValue)\n        return\n    },\n    // empty functions were benchmarked as running faster than both\n    // `f && f()` and `if (f) { f(); }`\n    preVirtualDiffApply() {},\n    postVirtualDiffApply() {},\n    preDiffApply() {},\n    postDiffApply() {},\n    filterOuterDiff: null,\n    compress: false, // Whether to work with compressed diffs\n    _const: false, // object with strings for every change types to be used in diffs.\n    document: window && window.document ? window.document : false\n}\n\n\nexport class DiffDOM {\n    constructor(options = {}) {\n\n        this.options = options\n        // IE11 doesn't have Object.assign and buble doesn't translate object spreaders\n        // by default, so this is the safest way of doing it currently.\n        Object.entries(DEFAULT_OPTIONS).forEach(([key, value]) => {\n            if (!Object.prototype.hasOwnProperty.call(this.options, key)) {\n                this.options[key] = value\n            }\n        })\n\n        if (!this.options._const) {\n            const varNames = [\"addAttribute\", \"modifyAttribute\", \"removeAttribute\",\n                \"modifyTextElement\", \"relocateGroup\", \"removeElement\", \"addElement\",\n                \"removeTextElement\", \"addTextElement\", \"replaceElement\", \"modifyValue\",\n                \"modifyChecked\", \"modifySelected\", \"modifyComment\", \"action\", \"route\",\n                \"oldValue\", \"newValue\", \"element\", \"group\", \"from\", \"to\", \"name\",\n                \"value\", \"data\", \"attributes\", \"nodeName\", \"childNodes\", \"checked\",\n                \"selected\"\n            ]\n            this.options._const = {}\n            if (this.options.compress) {\n                varNames.forEach((varName, index) => this.options._const[varName] = index)\n            } else {\n                varNames.forEach(varName => this.options._const[varName] = varName)\n            }\n        }\n\n        this.DiffFinder = DiffFinder\n\n    }\n\n    apply(tree, diffs) {\n        return applyDOM(tree, diffs, this.options)\n    }\n\n    undo(tree, diffs) {\n        return undoDOM(tree, diffs, this.options)\n    }\n\n    diff(t1Node, t2Node) {\n        const finder = new this.DiffFinder(t1Node, t2Node, this.options)\n        return finder.init()\n    }\n\n}\n","/**\n * Use TraceLogger to figure out function calls inside\n * JS objects by wrapping an object with a TraceLogger\n * instance.\n *\n * Pretty-prints the call trace (using unicode box code)\n * when tracelogger.toString() is called.\n */\n\n/**\n * Wrap an object by calling new TraceLogger(obj)\n *\n * If you're familiar with Python decorators, this\n * does roughly the same thing, adding pre/post\n * call hook logging calls so that you can see\n * what's going on.\n */\nexport class TraceLogger {\n    constructor(obj = {}) {\n        this.pad = \"│   \"\n        this.padding = \"\"\n        this.tick = 1\n        this.messages = []\n        const wrapkey = (obj, key) => {\n            // trace this function\n            const oldfn = obj[key]\n            obj[key] = (...args) => {\n                this.fin(key, Array.prototype.slice.call(args))\n                const result = oldfn.apply(obj, args)\n                this.fout(key, result)\n                return result\n            }\n        }\n        // can't use Object.keys for prototype walking\n        for (let key in obj) {\n            if (typeof obj[key] === \"function\") {\n                wrapkey(obj, key)\n            }\n        }\n        this.log(\"┌ TRACELOG START\")\n    }\n    // called when entering a function\n    fin(fn, args) {\n        this.padding += this.pad\n        this.log(`├─> entering ${fn}`, args)\n    }\n    // called when exiting a function\n    fout(fn, result) {\n        this.log(\"│<──┘ generated return value\", result)\n        this.padding = this.padding.substring(0, this.padding.length - this.pad.length)\n    }\n    // log message formatting\n    format(s, tick) {\n        let nf = function(t) {\n            t = `${t}`\n            while (t.length < 4) {\n                t = `0${t}`\n            }\n            return t\n        }\n        return `${nf(tick)}> ${this.padding}${s}`\n    }\n    // log a trace message\n    log() {\n        let s = Array.prototype.slice.call(arguments)\n        const stringCollapse = function(v) {\n            if (!v) {\n                return \"<falsey>\"\n            }\n            if (typeof v === \"string\") {\n                return v\n            }\n            if (v instanceof HTMLElement) {\n                return v.outerHTML || \"<empty>\"\n            }\n            if (v instanceof Array) {\n                return `[${v.map(stringCollapse).join(\",\")}]`\n            }\n            return v.toString() || v.valueOf() || \"<unknown>\"\n        }\n        s = s.map(stringCollapse).join(\", \")\n        this.messages.push(this.format(s, this.tick++))\n    }\n    // turn the log into a structured string with\n    // unicode box codes to make it a sensible trace.\n    toString() {\n        let cap = \"×   \"\n        let terminator = \"└───\"\n        while (terminator.length <= this.padding.length + this.pad.length) {\n            terminator += cap\n        }\n        let _ = this.padding\n        this.padding = \"\"\n        terminator = this.format(terminator, this.tick)\n        this.padding = _\n        return `${this.messages.join(\"\\n\")}\\n${terminator}`\n    }\n}\n"],"names":["unescape","string","replace","objToNode","objNode","insideSvg","options","let","node","nodeName","document","createTextNode","data","createComment","createElementNS","createElement","attributes","Object","entries","forEach","ref","setAttribute","key","value","childNodes","childNode","appendChild","valueDiffing","checked","selected","getFromRoute","route","slice","length","const","c","splice","applyDiff","tree","diff","newNode","reference","_const","info","preDiffApply","action","addAttribute","name","modifyAttribute","newValue","removeAttribute","modifyTextElement","nodeType","textDiff","oldValue","modifyValue","modifyComment","modifyChecked","modifySelected","replaceElement","parentNode","replaceChild","namespaceURI","relocateGroup","Array","groupLength","map","removeChild","from","index","to","insertBefore","removeElement","addElement","element","removeTextElement","addTextElement","console","log","postDiffApply","swap","obj","p1","p2","tmp","undoDOM","diffs","reverse","undoDiff","Diff","this","elementDescriptors","el","output","push","id","findUniqueDescriptors","li","uniqueDescriptors","duplicateDescriptors","descriptor","inUnique","uniqueInBoth","l1","l2","l1Unique","l2Unique","inBoth","keys","removeDone","outerDone","innerDone","valueDone","every","isEqual","e1","e2","Boolean","e1Attributes","e2Attributes","attribute","roughlyEqual","sameSiblings","preventRecursion","nodeList1","nodeList2","childUniqueDescriptors","cloneObj","JSON","parse","stringify","findCommonSubsets","c1","c2","marked1","marked2","lcsSize","c1Length","c2Length","matches","subsetsSame","some","i","c1Desc","c2Desc","description","c1Index","c1Element","c2Index","c2Element","makeArray","n","v","toString","setValue","aKey","aValue","DiffTracker","list","getFromVirtualRoute","nodeIndex","applyVirtual","routeInfo","newSubsets","movedNode","subsets","splitLength","delete","filter","concat","applyVirtualDiff","nodeToObj","aNode","prototype","call","undefined","type","includes","toLowerCase","add","fn","tagRE","empty","create","attrRE","lookup","area","base","br","col","embed","hr","img","input","keygen","link","menuItem","meta","param","source","track","wbr","html","components","current","result","level","arr","byTag","inComponent","tag","parent","isOpen","charAt","start","nextChar","res","tagMatch","match","toUpperCase","voidElement","reg","RegExp","done","exec","trim","attr","indexOf","split","lastIndex","substring","parseTag","tagName","end","stringToObj","cleanObj","child","DiffFinder","t1Node","t2Node","t1","HTMLElement","t2","diffcount","foundAll","debug","t1Orig","t2Orig","tracker","init","findDiffs","diffcap","window","diffError","Error","findNextDiff","error","fdiffs","maxDepth","findOuterDiff","filterOuterDiff","findInnerDiff","findValueDiff","attr1","attr2","attrLength","pos","maxNodeDiffCount","Math","abs","sort","t1ChildNodes","t2ChildNodes","last","max","childNodesLengthDifference","maxChildCount","subtrees","subsetsAge","oldTree","newTree","oldChildren","newChildren","subset","returnIndex","arguments","item","markSubTrees","attemptGroupRelocation","destinationDifferent","toGroup","group","similarNode","testI","gapInformation","stable","gaps1","gaps2","endOld","endNew","j","getGapInformation","shortest","min","index2","index1","DEFAULT_OPTIONS","currentValue","expectedValue","preVirtualDiffApply","postVirtualDiffApply","compress","DiffDOM","hasOwnProperty","varNames","varName","apply","applyDOM","undo","TraceLogger","pad","padding","tick","messages","wrapkey","oldfn","fin","args","fout","format","s","t","stringCollapse","outerHTML","join","valueOf","terminator","_"],"mappings":"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"}